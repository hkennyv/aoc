var searchIndex = JSON.parse('{\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","t":[3,3,3,4,3,3,13,13,3,4,13,13,8,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AhoCorasick","AhoCorasickBuilder","Error","ErrorKind","FindIter","FindOverlappingIter","LeftmostFirst","LeftmostLongest","Match","MatchKind","PremultiplyOverflow","Standard","StateID","StateIDOverflow","StreamFindIter","anchored","ascii_case_insensitive","auto_configure","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_with_size","byte_classes","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dense_depth","description","dfa","earliest_find","end","eq","eq","find","find_iter","find_overlapping_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_usize","hash","heap_bytes","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_match","kind","match_kind","match_kind","max_id","max_pattern_len","ne","new","new","new_auto_configured","next","next","next","packed","pattern","pattern_count","prefilter","premultiply","replace_all","replace_all_bytes","replace_all_with","replace_all_with_bytes","start","stream_find_iter","stream_replace_all","stream_replace_all_with","supports_overlapping","supports_stream","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","max","max","requested_max","Builder","Config","FindIter","LeftmostFirst","LeftmostLongest","MatchKind","Searcher","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","extend","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","heap_bytes","into","into","into","into","into","into_iter","match_kind","match_kind","minimum_len","new","new","new","next","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aho_corasick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aho_corasick::ErrorKind","","","aho_corasick::packed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An automaton for searching multiple strings in linear …","A builder for configuring an Aho-Corasick automaton.","An error that occurred during the construction of an …","The kind of error that occurred.","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","Use leftmost-first match semantics, which reports …","Use leftmost-longest match semantics, which reports …","A representation of a match reported by an Aho-Corasick …","A knob for controlling the match semantics of an …","An error that occurs when premultiplication of state IDs …","Use standard match semantics, which support overlapping …","A trait describing the representation of an automaton’s …","An error that occurs when constructing an automaton would …","An iterator that reports Aho-Corasick matches in a stream.","Enable anchored mode, which requires all matches to start …","Enable ASCII-aware case insensitive matching.","Automatically configure the settings on this builder …","","","","","","","","","","","","","","","","","","","Build an Aho-Corasick automaton using the configuration …","Build an Aho-Corasick automaton using the configuration …","Shrink the size of the transition alphabet by mapping …","","","","","","","","","","","","","","","Set the limit on how many NFA states use a dense …","","Compile the standard Aho-Corasick automaton into a …","Returns the location of the first detected match in …","The ending position of the match.","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns an iterator of overlapping matches in the given …","","","","","","","","","","","","","","","","","","","","Convert from a <code>usize</code> to this implementation’s …","","Returns the approximate total amount of heap used by this …","","","","","","","","","","","","","Returns true if and only if this match is empty. That is, …","Returns true if and only if this automaton matches the …","Return the kind of this error.","Returns the match kind used by this automaton.","Set the desired match semantics.","Return the maximum state identifier supported by this …","Returns the length of the longest pattern matched by this …","","Create a new Aho-Corasick automaton using the default …","Create a new builder for configuring an Aho-Corasick …","Build an Aho-Corasick automaton with an automatically …","","","","A lower level API for packed multiple substring search, …","Returns the identifier of the pattern that matched.","Return the total number of patterns matched by this …","Enable heuristic prefilter optimizations.","Premultiply state identifiers in the transition table. …","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","The starting position of the match.","Returns an iterator of non-overlapping matches in the …","Search for and replace all matches of this automaton in …","Search the given reader and replace all matches of this …","Returns true if and only if this automaton supports …","Returns true if and only if this automaton supports …","","","","","","","","Convert this implementation’s representation to a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum possible state ID.","The maximum possible state id.","The maximum ID required by premultiplication.","A builder for constructing a packed searcher from a …","The configuration for a packed multiple pattern searcher.","An iterator over non-overlapping matches from a packed …","Use leftmost-first match semantics, which reports …","Use leftmost-longest match semantics, which reports …","A knob for controlling the match semantics of a packed …","A packed searcher for quickly finding occurrences of …","Add the given pattern to this set to match.","","","","","","","","","","","Build a searcher from the patterns added to this builder …","Create a packed builder from this configuration. The …","","","","","","","","","","","","","Add the given iterator of patterns to this set to match.","Return the first occurrence of any of the patterns in …","Return the first occurrence of any of the patterns in …","Return an iterator of non-overlapping occurrences of the …","","","","","","","","","","","Returns the approximate total amount of heap used by this …","","","","","","","Set the match semantics for this configuration.","Returns the match kind used by this packed searcher.","Returns the minimum length of a haystack that is required …","Create a new default configuration. A default …","Create a new builder for constructing a multi-pattern …","A convenience function for constructing a searcher from …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,0,0,2,1,0,2,0,3,3,3,4,5,6,7,3,1,8,2,9,4,5,6,7,3,1,8,2,9,3,3,3,4,3,1,8,2,9,4,3,1,8,2,9,3,1,3,8,3,4,9,1,9,4,4,4,4,5,6,7,3,1,8,8,2,9,4,5,6,7,3,1,8,2,9,10,9,4,4,5,6,7,3,1,8,2,9,5,6,7,9,4,8,4,3,10,4,9,4,3,4,5,6,7,0,9,4,3,3,4,4,4,4,9,4,4,4,4,4,4,3,1,8,2,9,8,10,4,5,6,7,3,1,8,2,9,4,5,6,7,3,1,8,2,9,4,5,6,7,3,1,8,2,9,11,12,12,0,0,0,13,13,0,0,14,13,15,14,16,17,13,15,14,16,17,14,15,13,15,14,16,13,15,14,16,13,15,14,13,14,16,16,16,13,15,14,16,17,13,15,14,16,17,16,13,15,14,16,17,17,15,16,16,15,14,16,17,13,15,14,16,13,15,14,16,17,13,15,14,16,17,13,15,14,16,17],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[],["ahocorasickbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ahocorasick",3]],[[],[["error",3],["result",4],["ahocorasick",3]]],[[["bool",15]],["ahocorasickbuilder",3]],[[],["ahocorasick",3]],[[],["ahocorasickbuilder",3]],[[],["matchkind",4]],[[],["error",3]],[[],["errorkind",4]],[[],["match",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ahocorasickbuilder",3]],[[],["matchkind",4]],[[["usize",15]],["ahocorasickbuilder",3]],[[],["str",15]],[[["bool",15]],["ahocorasickbuilder",3]],[[["asref",8]],[["match",3],["option",4]]],[[],["usize",15]],[[["matchkind",4]],["bool",15]],[[["match",3]],["bool",15]],[[["asref",8]],[["match",3],["option",4]]],[[],["finditer",3]],[[],["findoverlappingiter",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["asref",8]],["bool",15]],[[],["errorkind",4]],[[],["matchkind",4]],[[["matchkind",4]],["ahocorasickbuilder",3]],[[],["usize",15]],[[],["usize",15]],[[["match",3]],["bool",15]],[[],["ahocorasick",3]],[[],["ahocorasickbuilder",3]],[[],["ahocorasick",3]],[[],[["match",3],["option",4]]],[[],[["match",3],["option",4]]],[[],[["result",6],["option",4]]],null,[[],["usize",15]],[[],["usize",15]],[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["str",15]],["string",3]],[[],[["vec",3],["u8",15]]],[[["string",3],["str",15]]],[[["vec",3]]],[[],["usize",15]],[[["read",8]],[["streamfinditer",3],["read",8]]],[[],["result",6]],[[],["result",6]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["asref",8]],["builder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["searcher",3],["option",4]]],[[],["builder",3]],[[],["matchkind",4]],[[],["config",3]],[[],["builder",3]],[[],["searcher",3]],[[]],[[]],[[]],[[]],[[],["matchkind",4]],[[],["config",3]],[[],["builder",3]],[[["matchkind",4]],["bool",15]],[[],["builder",3]],[[["asref",8]],[["match",3],["option",4]]],[[["usize",15],["asref",8]],[["match",3],["option",4]]],[[],["finditer",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matchkind",4]],["config",3]],[[],["matchkind",4]],[[],["usize",15]],[[],["config",3]],[[],["builder",3]],[[],[["searcher",3],["option",4]]],[[],[["match",3],["option",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"MatchKind"],[4,"ErrorKind"],[3,"AhoCorasickBuilder"],[3,"AhoCorasick"],[3,"FindIter"],[3,"FindOverlappingIter"],[3,"StreamFindIter"],[3,"Error"],[3,"Match"],[8,"StateID"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"],[4,"MatchKind"],[3,"Builder"],[3,"Config"],[3,"Searcher"],[3,"FindIter"]]},\
"aoc_2020":{"doc":"Advent of Code (2020)","t":[5],"n":["main"],"q":["aoc_2020"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"day01":{"doc":"— Day 1: Report Repair —","t":[5,5,5,5],"n":["assert_indices_havent_crossed","main","part1","part2"],"q":["day01","","",""],"d":["utility function that helps to check index bounds","The main function prints out the results for part1 and …","The part1 function calculates the result for part1","The part2 function calculates the result for part2"],"i":[0,0,0,0],"f":[[[["usize",15]],["bool",15]],[[]],[[],[["string",3],["result",4],["i32",15]]],[[],[["string",3],["result",4],["i32",15]]]],"p":[]},\
"day02":{"doc":"— Day 2: Password Philosophy —","t":[5,5,5,5,5,5,5],"n":["handle_row_p1","handle_row_p2","main","parse_input_row","parse_policy","password_is_valid_p1","password_is_valid_p2"],"q":["day02","","","","","",""],"d":["part1 row handler","part2 row handler","","takes in a row in the format: policy: password and it …","parses the policy into a two numbers and a letter","determines if the password is valid (based on part1 …","determines if the password is valid (based on part2 …"],"i":[0,0,0,0,0,0,0],"f":[[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[]],[[["string",3]]],[[["string",3]]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]]],"p":[]},\
"day03":{"doc":"— Day 3: Toboggan Trajectory —","t":[5,5,5,5],"n":["count_trees","count_trees_p1","count_trees_p2","main"],"q":["day03","","",""],"d":["counts the number of trees given a forest, a right_slope, …","performs the tree counting for part1","performs the tree counting for part2",""],"i":[0,0,0,0],"f":[[[["i32",15]],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[]]],"p":[]},\
"day04":{"doc":"— Day 4: Passport Processing —","t":[5,5,0,6,8,10,10,10,10,10,10,10,10,10,10],"n":["main","parse_passport","passport","Passport","ValidatePassport","is_valid_p1","is_valid_p2","validate_byr","validate_cid","validate_ecl","validate_eyr","validate_hcl","validate_hgt","validate_iyr","validate_pid"],"q":["day04","","","day04::passport","","","","","","","","","","",""],"d":["","parses the key, value pairs from the passport string and …","","","a trait that exposes methods to validate the passport for …","method that validates a passport based on p1 criteria","method that validates a passport based on p2 criteria","validates birth year is a number between 1920 and 2002","validates cid, automatically true if it exists","validates ecl is one of “amb”, “blu”, “brn”, …","validates expiration year is between 2020 and 2030","validates hcl is a hex color that starts with a ‘#’ …","validates hgt is a number followed by either <code>cm</code> or <code>in</code>. if …","validates issue year is a number between 2010 and 2020","validates pid is a nine digit number including leading …"],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],"f":[[[]],[[["str",15]],[["hashmap",3],["string",3]]],null,null,null,[[],["bool",15]],[[],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]]],"p":[[8,"ValidatePassport"]]},\
"day05":{"doc":"— Day 5: Binary Boarding —","t":[5,5,5,5,5],"n":["get_column","get_my_seat_id","get_row","get_seat_id","main"],"q":["day05","","","",""],"d":["calculates the column from the last 3 characters of the …","calculates <em>my</em> seat id","calculates the row from the first 7 characters of the …","calculates the seat_id from the row and column",""],"i":[0,0,0,0,0],"f":[[[["str",15]],["i32",15]],[[],["i32",15]],[[["str",15]],["i32",15]],[[["i32",15]],["i32",15]],[[]]],"p":[]},\
"day06":{"doc":"— Day 6: Custom Customs —","t":[5,5,5],"n":["count_questions_from_anyone","count_questions_from_everyone","main"],"q":["day06","",""],"d":["sum the count of the number of questions to which <em>anyone</em> …","sum the count of the number of questions to which <em>everyone</em>…",""],"i":[0,0,0],"f":[[[],["i32",15]],[[],["i32",15]],[[]]],"p":[]},\
"day07":{"doc":"— Day 7: Handy Haversacks —","t":[5,5,5,5,5,5,5],"n":["count_bag","main","parse_rule","parse_rule2","part1","part2","update_bags"],"q":["day07","","","","","",""],"d":["counts the number of bags inside of <code>bag</code>. updates <code>cache</code> …","","parses a line into a rule. returns the bag and a set of …","parses a line into a rule. returns the bag and a vector …","calculates the number of bag colors that can eventually …","calculates the number of bags inside of a “shiny gold”…","iterates through the rules and checks for bag that …"],"i":[0,0,0,0,0,0,0],"f":[[[["string",3],["hashmap",3],["hashmap",3]],["i32",15]],[[]],[[["str",15]]],[[["str",15]]],[[["str",15]],["i32",15]],[[["str",15]],["i32",15]],[[["hashset",3]],[["hashset",3],["string",3]]]],"p":[]},\
"day08":{"doc":"— Day 8: Handheld Halting —","t":[5,5,5,5,0,13,3,13,13,4,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["main","parse_input","part1","part2","vm","ACC","Instruction","JMP","NOP","OperationEnum","VM","acc","argument","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","does_terminate","eq","execute_instruction","fix_instructions","fmt","fmt","fmt","from","from","from","has_run","idx","instructions","into","into","into","new","operation","run","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["day08","","","","","day08::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","returns true when a sequence of instructions successfully …","","Executes a single instruction operation with its …","Attempts to change the nop and jmp instructions until it …","","","","","","","","","","","","","Creates a new VM instance given a vector of instructions. …","","Runs the VM. It will terminate once an instruction that …","","","","","","","","","","",""],"i":[0,0,0,0,0,1,0,1,1,0,0,2,3,1,3,2,1,3,2,1,3,1,3,2,1,2,2,1,3,2,1,3,2,2,2,2,1,3,2,2,3,2,1,3,1,3,2,1,3,2,1,3,2],"f":[[[]],[[["str",15]],[["instruction",3],["vec",3]]],[[["str",15]],["i32",15]],[[["str",15]],["i32",15]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["operationenum",4]],[[],["instruction",3]],[[]],[[]],[[],["bool",15]],[[["operationenum",4]],["bool",15]],[[["instruction",3]]],[[],["i32",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[["instruction",3],["vec",3]],["vm",3]],null,[[],["i32",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"OperationEnum"],[3,"VM"],[3,"Instruction"]]},\
"day09":{"doc":"— Day 9: Encoding Error —","t":[5,5,5,5],"n":["main","parse_input","part1","part2"],"q":["day09","","",""],"d":["","parses the input from a String to a Vec","finds the first number that does not have 2 numbers in …","returns the min plus the max of a set of contiguous …"],"i":[0,0,0,0],"f":[[[]],[[["str",15]],[["i64",15],["vec",3]]],[[["usize",15]],["i64",15]],[[["i64",15]],["i64",15]]],"p":[]},\
"day10":{"doc":"— Day 10: Adapter Array —","t":[5,5,5],"n":["main","part1","part2"],"q":["day10","",""],"d":["","",""],"i":[0,0,0],"f":[[[]],[[],["i64",15]],[[],["i64",15]]],"p":[]},\
"day11":{"doc":"— Day 11: Seating System —","t":[5,5,5,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["main","part1","part2","seating","SeatingSystem","borrow","borrow_mut","count_seats","from","grid","into","new","num_adjacent","num_can_see","print_grid","try_from","try_into","type_id","update","update2"],"q":["day11","","","","day11::seating","","","","","","","","","","","","","","",""],"d":["","counts the number of seats using pt1 rules after the …","counts the number of seats using pt2 rules after the …","Seating","","","","a helper function that counts the number of occupied …","","","","returns a new instance of <code>SeatingSystem</code> given a grid of …","returns the number of adjacent occupied seats next to the …","returns the number of occupied seats that the current …","helper function that prints the entire grid","","","","updates and applies the rules from pt1, returns a boolean …","updates and applies the rules from pt2, returns a boolean …"],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[[[]],[[],["i32",15]],[[],["i32",15]],null,null,[[]],[[]],[[],["i32",15]],[[]],null,[[]],[[],["seatingsystem",3]],[[["usize",15]],["i32",15]],[[["usize",15]],["i32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]]],"p":[[3,"SeatingSystem"]]},\
"day12":{"doc":"— Day 12: Rain Risk —","t":[5,5,5,0,3,11,11,11,11,11,11,11,12,11,12,11,11,11,12],"n":["main","part1","part2","ship","Ship","borrow","borrow_mut","from","get_manhattan_distance","handle_action_p1","handle_action_p2","into","location","new","orientation","try_from","try_into","type_id","waypoint"],"q":["day12","","","","day12::ship","","","","","","","","","","","","","",""],"d":["","","","","the <code>Ship</code> model. the orientation is in +degrees and the …","","","","returns the manhattan distance - the absolute values of …","updates the ship’s orientation and location based on a …","updates the ship’s location and the waypoints location …","","","returns a new instance of <code>Ship</code> initialized with …","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[[[]],[[],["i32",15]],[[],["i32",15]],null,null,[[]],[[]],[[]],[[],["i32",15]],[[["char",15],["i32",15]]],[[["char",15],["i32",15]]],[[]],null,[[],["ship",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"Ship"]]},\
"day13":{"doc":"","t":[5,5,5,5,5],"n":["main","parse_input","parse_input2","part1","part2"],"q":["day13","","","",""],"d":["","","parses the input and returns a vector with the bus_ids, …","",""],"i":[0,0,0,0,0],"f":[[[]],[[["str",15]]],[[["str",15]],[["i64",15],["vec",3]]],[[["i64",15]],["i64",15]],[[],["i64",15]]],"p":[]},\
"day14":{"doc":"","t":[5,5,5,0,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11],"n":["main","part1","part2","system","DockSystem","borrow","borrow_mut","combinations","from","get_addresses","get_masks","get_sum","into","mask","memory","new","try_from","try_into","type_id","update_mask","update_memory","update_memory2"],"q":["day14","","","","day14::system","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","returns a new <code>DockSystem</code> with an empty bitstring mask and …","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[[[]],[[["str",15]],["u64",15]],[[["str",15]],["u64",15]],null,null,[[]],[[]],[[["str",15]],[["vec",3],["string",3]]],[[]],[[["str",15],["u64",15]],[["u64",15],["vec",3]]],[[["str",15]]],[[],["u64",15]],[[]],null,null,[[],["docksystem",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["str",15]]],[[["u64",15]]],[[["u64",15]]]],"p":[[3,"DockSystem"]]},\
"day15":{"doc":"— Day 15: Rambunctious Recitation —","t":[5,5,5,5],"n":["main","parse_input","part1","part1_old"],"q":["day15","","",""],"d":["","parses the input into a vector of i32’s","a preallocated vector implementation of the memory game. …","a hashmap implementation of the memory game. this is …"],"i":[0,0,0,0],"f":[[[]],[[["str",15]],[["vec",3],["i32",15]]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]]],"p":[]},\
"day16":{"doc":"— Day 16: Ticket Translation —","t":[6,6,5,5,5,5,5,5,5,5],"n":["Rule","Rules","main","parse_input","part1","part2","print_matrix","solve_matrix","ticket_is_valid","ticket_num_is_valid"],"q":["day16","","","","","","","","",""],"d":["","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[]],[[["str",15]]],[[["hashmap",3]],["i32",15]],[[["hashmap",3]],["u64",15]],[[]],[[["vec",3]]],[[["hashmap",3]],["bool",15]],[[["i32",15]],["bool",15]]],"p":[]},\
"day17":{"doc":"— Day 17: Conway Cubes —","t":[6,6,6,6,5,5,5,5,5,5,5,5,5,5],"n":["Grid","Grid4d","Layer","Line","count_active","count_active4d","get_active_neighbors","get_active_neighbors4d","main","parse_input","part1","part2","simulate_cycle","simulate_cycle4d"],"q":["day17","","","","","","","","","","","","",""],"d":["","","","1-D type","","","","","","","simulates the cube growing for ndim = 3","simulates the cube growing for ndim = 4","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,[[["vec",3]],["i32",15]],[[["vec",3]],["i32",15]],[[["usize",15],["vec",3]],["i32",15]],[[["usize",15],["vec",3]],["i32",15]],[[]],[[["str",15]],[["vec",3],["vec",3]]],[[["usize",15],["vec",3]],["i32",15]],[[["usize",15],["vec",3]],["i32",15]],[[["vec",3]]],[[["vec",3]]]],"p":[]},\
"day18":{"doc":"— Day 18: Operation Order —","t":[13,13,13,13,4,11,11,11,11,11,11,11,5,5,11,5,5,5,5,11,11,11],"n":["Add","LeftP","Mul","Num","Token","borrow","borrow_mut","eq","fmt","from","hash","into","main","make_reverse_polish","ne","parse_input","part1","part2","solve_reverse_polish","try_from","try_into","type_id"],"q":["day18","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","evaluates the expression using a shunting-yard algorithm","evaluates the expression using a shunting-yard algorithm","","","",""],"i":[1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[["token",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["hashmap",3],["str",15]],[["vecdeque",3],["token",4]]],[[["token",4]],["bool",15]],[[["str",15]],[["vec",3],["string",3]]],[[],["u64",15]],[[],["u64",15]],[[["vecdeque",3]],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Token"]]},\
"day19":{"doc":"","t":[13,13,4,13,11,11,11,11,11,5,11,11,11,5,11,5,5,5,5,5,11,11,11,11],"n":["Character","Multiple","Rule","Single","borrow","borrow_mut","clone","clone_into","eq","evaluate_rule","fmt","from","into","main","ne","parse_input","parse_rule","part1","part2","s_to_vec","to_owned","try_from","try_into","type_id"],"q":["day19","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A single character (this is essentially our base case)","Multiple vectors of rule numbers. We will need to …","This enum defines a “Rule”. That is, either a single …","A vector of rule numbers, we will need to recursively …","","","","","","Evaluates a rule recurively and returns the string …","","","","","","The input.txt is split up into two portions: a top and a …","Parses a rule given a string slice","We want to evaluate rule 0 and see which messages match …","In this part, we replace rule 8 and 11 with 42 | 42 8 and …","A simple helper function to convert a string to a Vec","","","",""],"i":[1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1,1,1,1],"f":[null,null,null,null,[[]],[[]],[[],["rule",4]],[[]],[[["rule",4]],["bool",15]],[[["hashmap",3]],["string",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["rule",4]],["bool",15]],[[["str",15]]],[[["str",15]],["rule",4]],[[["hashmap",3]],["usize",15]],[[["hashmap",3]],["usize",15]],[[["str",15]],[["usize",15],["vec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Rule"]]},\
"day20":{"doc":"","t":[5,5,5,0,6,5],"n":["main","parse_input","part1","tile","Tile","rotate_tile"],"q":["day20","","","","day20::tile",""],"d":["","parses the input file into a HashMap<i32, Tile> where the …","","","type alias defining a Tile to be a 2D vector of chars. …",""],"i":[0,0,0,0,0,0],"f":[[[]],[[["str",15]],[["vec",3],["hashmap",3],["i32",15]]],[[["hashmap",3]],["i64",15]],null,null,[[["vec",3]],[["vec",3],["vec",3]]]],"p":[]},\
"day21":{"doc":"","t":[5],"n":["main"],"q":["day21"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"day22":{"doc":"","t":[5],"n":["main"],"q":["day22"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"day23":{"doc":"","t":[5],"n":["main"],"q":["day23"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"day24":{"doc":"","t":[5],"n":["main"],"q":["day24"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"day25":{"doc":"","t":[5],"n":["main"],"q":["day25"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[]],null],"p":[]},\
"memchr":{"doc":"The <code>memchr</code> crate provides heavily optimized routines for …","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Memchr","Memchr2","Memchr3","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for <code>memchr</code>.","An iterator for <code>memchr2</code>.","An iterator for <code>memchr3</code>.","","","","","","","","","","","","","","","","Search for the first occurrence of a byte in a slice.","Like <code>memchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Search for the last occurrence of a byte in a slice.","Like <code>memrchr</code>, but searches for either of two bytes …","An iterator over all occurrences of the needles in a …","Like <code>memrchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Creates a new iterator that yields all positions of …","Creates a new iterator that yields all positions of …","Create a new <code>Memchr3</code> that’s initialized to zero with a …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],["memchr2",3]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],["memchr3",3]],[[["u8",15]],["memchr",3]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["memchr2",3],["rev",3]]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["rev",3],["memchr3",3]]],[[["u8",15]],[["memchr",3],["rev",3]]],[[["u8",15]],["memchr",3]],[[["u8",15]],["memchr2",3]],[[["u8",15]],["memchr3",3]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","t":[12,3,3,3,3,13,4,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","CaptureLocations","CaptureMatches","CaptureNames","Captures","CompiledTooBig","Error","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","Syntax","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","bytes","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","eq","escape","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","ne","ne","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode","0","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","ne","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode"],"q":["regexregex::bytesd":["","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture …","An iterator over the names of all possible captures.","Captures represents a group of captured strings for a …","The compiled program exceeded the set size limit. The …","An error that occurred during parsing or compiling a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal string replacement.","A compiled regular expression for matching Unicode …","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex …","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the …","A syntax error.","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Match regular expressions on arbitrary bytes.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …","Returns the same as captures, but starts the search at …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","","Escapes all regular expression meta characters in <code>text</code>.","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if one of the regexes in this …","Returns true if and only if there is a match for the …","Returns the same as is_match, but starts the search at …","An iterator that yields all capturing matches in the …","Returns an iterator over indexes in the regex that …","Returns the number of captured groups.","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Returns the total number of capturing groups.","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If …","","","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Create a new regex set with the given regular expressions.","Compiles a regular expression. Once compiled, it can be …","","","","","","","","","","","Return a fixed unchanging replacement string.","Return a fixed unchanging replacement string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture …","An iterator over the names of all possible captures.","Captures represents a group of captured byte strings for …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal byte string replacement.","A compiled regular expression for matching arbitrary …","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex …","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the …","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …","Returns the same as <code>captures_read</code>, but starts the search …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if there is a match for the …","Returns true if and only if one of the regexes in this …","Returns the same as is_match, but starts the search at …","An iterator that yields all capturing matches in the …","Returns an iterator over indexes in the regex that …","Returns the number of captured groups.","Returns the total number of capturing groups.","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If …","","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement byte string.","Return a fixed unchanging replacement byte string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag."],"i":[1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,11,12,20,20,0,4,4,4,4,4,4,4,11,12,2,14,15,16,3,4,17,18,2,14,15,16,3,4,17,18,2,11,12,11,12,14,3,2,3,0,8,4,4,4,8,2,2,14,15,3,4,4,17,19,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,4,8,17,11,12,8,8,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,5,6,7,9,10,13,15,16,18,14,14,4,4,8,15,8,14,15,17,15,15,14,11,12,8,2,3,11,12,11,12,14,4,5,6,7,9,10,13,16,18,13,16,20,20,1,19,11,12,14,3,4,4,20,1,19,4,4,4,5,13,16,11,12,4,4,3,11,12,2,14,15,16,3,4,17,18,2,4,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,5,6,7,8,9,10,1,2,11,12,13,14,15,16,3,4,17,18,19,11,12,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,23,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,30,31,39,39,23,23,23,23,23,23,23,30,31,22,23,32,33,36,37,38,22,23,32,33,36,37,38,30,31,30,31,36,22,22,29,23,23,23,29,22,23,23,32,34,36,37,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,23,29,32,30,31,29,29,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,24,25,26,27,28,33,35,37,38,36,23,36,23,29,37,29,32,36,37,37,37,36,30,31,29,22,30,31,30,31,23,36,24,25,26,27,28,33,35,38,35,38,39,39,21,34,30,31,36,22,23,23,39,21,34,23,23,23,28,35,38,30,31,23,23,22,30,31,22,23,32,33,36,37,38,23,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,24,25,26,27,28,29,21,30,31,22,23,32,33,34,35,36,37,38,30,31],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["regex",3],["result",4],["error",4]]],[[],[["result",4],["regexset",3],["error",4]]],[[],["replacerref",3]],[[],["replacerref",3]],null,[[],["capturelocations",3]],[[],["capturenames",3]],[[["str",15]],[["option",4],["captures",3]]],[[["str",15]],["capturematches",3]],[[],["usize",15]],[[["str",15],["capturelocations",3]],[["match",3],["option",4]]],[[["str",15],["usize",15],["capturelocations",3]],[["match",3],["option",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["error",4]],[[],["regexset",3]],[[],["setmatches",3]],[[],["setmatchesiter",3]],[[],["match",3]],[[],["regex",3]],[[],["capturelocations",3]],[[],["subcapturematches",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["regexset",3]],[[],["usize",15]],[[["error",4]],["bool",15]],[[["match",3]],["bool",15]],[[["str",15]],["string",3]],[[["string",3],["str",15]]],[[["str",15]],[["match",3],["option",4]]],[[["usize",15],["str",15]],[["match",3],["option",4]]],[[["str",15]],["matches",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["regex",3],["result",4],["error",4]]],[[["usize",15]],[["match",3],["option",4]]],[[["usize",15]],["option",4]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["str",15]],["str",15]],[[["usize",15]],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["usize",15],["str",15]],["bool",15]],[[],["subcapturematches",3]],[[],["setmatchesiter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[["str",15]],["setmatches",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["str",15]],[["match",3],["option",4]]],[[["error",4]],["bool",15]],[[["match",3]],["bool",15]],[[["u32",15]],["regexbuilder",3]],[[["u32",15]],["regexsetbuilder",3]],[[["str",15]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[],[["result",4],["regexset",3],["error",4]]],[[["str",15]],[["regex",3],["result",4],["error",4]]],[[],[["option",4],["option",4]]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],[["option",4],["captures",3]]],[[],[["match",3],["option",4]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["option",4]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[],[["usize",15],["range",3]]],[[["replacer",8],["str",15]],[["cow",4],["str",15]]],[[["replacer",8],["str",15]],[["cow",4],["str",15]]],[[["captures",3],["string",3]]],[[["captures",3],["string",3]]],[[["captures",3],["string",3]]],[[["usize",15],["replacer",8],["str",15]],[["cow",4],["str",15]]],[[["str",15]],[["option",4],["usize",15]]],[[["usize",15],["str",15]],[["option",4],["usize",15]]],[[]],[[]],[[]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["str",15]],["split",3]],[[["usize",15],["str",15]],["splitn",3]],[[],["usize",15]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["regex",3],["error",4]]],[[],[["result",4],["regexset",3],["error",4]]],[[],["replacerref",3]],[[],["replacerref",3]],[[],["capturelocations",3]],[[],["capturenames",3]],[[],[["option",4],["captures",3]]],[[],["capturematches",3]],[[],["usize",15]],[[["capturelocations",3]],[["option",4],["match",3]]],[[["usize",15],["capturelocations",3]],[["option",4],["match",3]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["match",3]],[[],["regex",3]],[[],["capturelocations",3]],[[],["subcapturematches",3]],[[],["regexset",3]],[[],["setmatches",3]],[[],["setmatchesiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["regexset",3]],[[],["usize",15]],[[["match",3]],["bool",15]],[[["vec",3]]],[[],[["option",4],["match",3]]],[[["usize",15]],[["option",4],["match",3]]],[[],["matches",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["regex",3],["error",4]]],[[["usize",15]],[["option",4],["match",3]]],[[["usize",15]],["option",4]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["usize",15]]],[[["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["subcapturematches",3]],[[],["setmatchesiter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["setmatches",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["str",15]],[["option",4],["match",3]]],[[["match",3]],["bool",15]],[[["u32",15]],["regexbuilder",3]],[[["u32",15]],["regexsetbuilder",3]],[[["str",15]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[["str",15]],[["result",4],["regex",3],["error",4]]],[[],[["result",4],["regexset",3],["error",4]]],[[],[["option",4],["match",3]]],[[],[["option",4],["captures",3]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["option",4]]],[[],[["option",4],["option",4]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[],[["cow",4],["option",4]]],[[],[["option",4],["cow",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[],[["usize",15],["range",3]]],[[["replacer",8]],["cow",4]],[[["replacer",8]],["cow",4]],[[["vec",3],["captures",3]]],[[["vec",3],["captures",3]]],[[["vec",3],["captures",3]]],[[["usize",15],["replacer",8]],["cow",4]],[[],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[]],[[]],[[]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[],["split",3]],[[["usize",15]],["splitn",3]],[[],["usize",15]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]]],"p":[[3,"NoExpand"],[4,"Error"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"CaptureMatches"],[3,"Matches"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"SetMatchesIntoIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIter"],[3,"CaptureLocations"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[8,"Replacer"],[3,"NoExpand"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"CaptureLocations"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIter"],[8,"Replacer"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":[4,13,3,3,6,13,3,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,0,13,13,3,13,13,13,3,13,4,4,13,13,13,13,13,13,13,13,13,3,13,13,13,4,13,3,4,3,13,3,4,13,13,4,3,4,4,3,3,13,3,4,4,13,13,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,16,3,4,13,13,13,13,13,13,4,13,13,13,13,13,13,3,13,3,4,13,13,3,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,3,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,16,13,13,3,13,13,13,13,13,3,13,13,13,13,4,13,3,4,3,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,3,13,13,13,13,13,13,13,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,0,11,11,11,0,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,13,3,4,13,3,3,3,3,3,3,13,13,13,13,13,16,3,4,13,3,13,4,3,4,13,4,13,13,13,16,13,3,13,4,4,13,13,13,13,13,13,13,13,13,13,13,8,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Parse","Parser","ParserBuilder","Result","Translate","UnicodeWordError","allow_invalid_utf8","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone","clone_into","clone_into","clone_into","default","description","dot_matches_new_line","eq","escape","escape_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hir","ignore_whitespace","into","into","into","into","is_meta_character","is_word_byte","is_word_character","multi_line","ne","nest_limit","new","new","octal","parse","swap_greed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_is_word_character","type_id","type_id","type_id","type_id","unicode","utf8","Alnum","Alpha","Alternation","Alternation","Ascii","Ascii","Assertion","Assertion","AssertionKind","Ast","AtLeast","Bell","BinaryOp","Blank","Bounded","Bracketed","Bracketed","CaptureIndex","CaptureLimitExceeded","CaptureName","CaptureName","CarriageReturn","CaseInsensitive","Class","Class","ClassAscii","ClassAsciiKind","ClassBracketed","ClassEscapeInvalid","ClassPerl","ClassPerlKind","ClassRangeInvalid","ClassRangeLiteral","ClassSet","ClassSetBinaryOp","ClassSetBinaryOpKind","ClassSetItem","ClassSetRange","ClassSetUnion","ClassUnclosed","ClassUnicode","ClassUnicodeKind","ClassUnicodeOpKind","Cntrl","Colon","Comment","Concat","Concat","DecimalEmpty","DecimalInvalid","Difference","Digit","Digit","Dot","DotMatchesNewLine","Empty","Empty","EndLine","EndText","Equal","Err","Error","ErrorKind","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","Exactly","Flag","Flag","FlagDanglingNegation","FlagDuplicate","FlagRepeatedNegation","FlagUnexpectedEof","FlagUnrecognized","Flags","Flags","FlagsItem","FlagsItemKind","FormFeed","Graph","Group","Group","GroupKind","GroupNameDuplicate","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","HexBrace","HexFixed","HexLiteralKind","IgnoreWhitespace","Intersection","Item","LineFeed","Literal","Literal","Literal","LiteralKind","Lower","MultiLine","Named","NamedValue","Negation","NestLimitExceeded","NonCapturing","NotEqual","NotWordBoundary","Octal","OneLetter","OneOrMore","Output","Perl","Perl","Position","Print","Punct","Punctuation","Range","Range","Repetition","Repetition","RepetitionCountDecimalEmpty","RepetitionCountInvalid","RepetitionCountUnclosed","RepetitionKind","RepetitionMissing","RepetitionOp","RepetitionRange","SetFlags","Space","Space","Space","Span","Special","SpecialLiteralKind","StartLine","StartText","SwapGreed","SymmetricDifference","Tab","Unicode","Unicode","Unicode","UnicodeClassInvalid","UnicodeLong","UnicodeShort","Union","UnsupportedBackreference","UnsupportedLookAround","Upper","Verbatim","VerticalTab","Visitor","WithComments","Word","Word","WordBoundary","X","Xdigit","ZeroOrMore","ZeroOrOne","add_item","ast","ast","ast","asts","asts","auxiliary_span","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","c","capture_index","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","comment","comments","description","digits","drop","drop","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","flag_state","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_name","greedy","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ast","into_ast","into_item","is_capturing","is_empty","is_empty","is_equal","is_negated","is_negation","is_one_line","is_valid","is_valid","items","items","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","lhs","line","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negated","negated","negated","negated","new","new","offset","op","parse","partial_cmp","partial_cmp","pattern","print","push","rhs","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","splat","start","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","visit","visit_alternation_in","visit_alternation_in","visit_class_set_binary_op_in","visit_class_set_binary_op_in","visit_class_set_binary_op_post","visit_class_set_binary_op_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_pre","visit_class_set_item_post","visit_class_set_item_post","visit_class_set_item_pre","visit_class_set_item_pre","visit_post","visit_post","visit_pre","visit_pre","with_end","with_start","name","op","value","original","original","original","Parser","ParserBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","ignore_whitespace","into","into","nest_limit","new","new","octal","parse","parse_with_comments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Alternation","Anchor","Anchor","Ascii","AsciiNegate","AtLeast","Bounded","Byte","Bytes","CaptureIndex","CaptureName","CaseFoldError","Class","Class","ClassBytes","ClassBytesIter","ClassBytesRange","ClassUnicode","ClassUnicodeIter","ClassUnicodeRange","Concat","Empty","EmptyClassNotAllowed","EndLine","EndText","Err","Error","ErrorKind","Exactly","Group","Group","GroupKind","Hir","HirKind","InvalidUtf8","Literal","Literal","NonCapturing","OneOrMore","Output","Range","Repetition","Repetition","RepetitionKind","RepetitionRange","StartLine","StartText","Unicode","Unicode","Unicode","UnicodeCaseUnavailable","UnicodeNegate","UnicodeNotAllowed","UnicodePerlClassNotFound","UnicodePropertyNotFound","UnicodePropertyValueNotFound","Visitor","WordBoundary","WordBoundary","ZeroOrMore","ZeroOrOne","alternation","anchor","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_fold_simple","case_fold_simple","case_fold_simple","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","default","default","description","difference","difference","dot","drop","empty","empty","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","greedy","group","has_subexprs","hir","hir","intersect","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_kind","is_all_ascii","is_all_ascii","is_all_assertions","is_alternation_literal","is_always_utf8","is_always_utf8","is_anchored_end","is_anchored_start","is_any_anchored_end","is_any_anchored_start","is_empty","is_line_anchored_end","is_line_anchored_start","is_literal","is_match_empty","is_match_empty","is_negated","is_unicode","iter","iter","kind","kind","kind","kind","literal","literal","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negate","negate","negate","new","new","new","new","next","next","partial_cmp","partial_cmp","pattern","print","push","push","ranges","ranges","repetition","span","start","start","start","start","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","translate","try_case_fold_simple","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","visit","visit_alternation_in","visit_alternation_in","visit_post","visit_post","visit_pre","visit_pre","word_boundary","index","name","Literal","Literals","add","add_byte_class","add_char_class","all_complete","any_complete","as_ref","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","contains_empty","cross_add","cross_product","cut","cut","deref","deref_mut","empty","empty","eq","eq","fmt","fmt","from","from","into","into","is_cut","is_empty","limit_class","limit_size","literals","longest_common_prefix","longest_common_suffix","min_len","ne","new","partial_cmp","prefixes","reverse","set_limit_class","set_limit_size","suffixes","to_empty","to_owned","to_owned","trim_suffix","try_from","try_from","try_into","try_into","type_id","type_id","unambiguous_prefixes","unambiguous_suffixes","union","union_prefixes","union_suffixes","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Translator","TranslatorBuilder","allow_invalid_utf8","borrow","borrow","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone_into","clone_into","default","dot_matches_new_line","fmt","fmt","from","from","into","into","multi_line","new","new","swap_greed","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","unicode","Four","One","Three","Two","Utf8Range","Utf8Sequence","Utf8Sequences","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","end","eq","eq","fmt","fmt","from","from","from","into","into","into","into_iter","len","matches","matches","ne","ne","new","next","partial_cmp","partial_cmp","reverse","start","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["regex_syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::astregex_syntax::ast::ClassUnicodeKind","","","regex_syntax::ast::ErrorKind","","","regex_syntax::ast::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast::print","","","","","","","","","","","regex_syntax::hirregex_syntax::hir::GroupKind","","regex_syntax::hir::literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::hir::print","","","","","","","","","","","regex_syntax::hir::translate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This error type encompasses any error that can be …","An error that occurred while translating concrete syntax …","A convenience parser for regular expressions.","A builder for a regular expression parser.","A type alias for dealing with errors returned by this …","An error that occurred while translating abstract syntax …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","When enabled, the parser will permit the construction of …","Defines an abstract syntax for regular expressions.","","","","","","","","","Build a parser from this configuration with the given …","Enable or disable the case insensitive flag by default.","","","","","","","","","Enable or disable the “dot matches any character” …","","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","","","","","","","","","","","","","Defines a high-level intermediate representation for …","Enable verbose mode in the regular expression.","","","","","Returns true if the give character has significance in a …","Returns true if and only if the given character is an …","Returns true if and only if the given character is a …","Enable or disable the multi-line matching flag by default.","","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into a high level …","Enable or disable the “swap greed” flag by default.","","","","","","","","","","","","","","Returns true if and only if the given character is a …","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Converts ranges of Unicode scalar values to equivalent …","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","An alternation of regular expressions.","An alternation of regular expressions.","<code>[\\\\x00-\\\\x7F]</code>","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A single zero-width assertion.","A single zero-width assertion.","An assertion kind.","An abstract syntax tree for a single regular expression.","<code>{m,}</code>","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","A single binary operation (i.e., &&, – or ~~).","<code>[ \\\\t]</code>","<code>{m,n}</code>","A bracketed character class set, which may contain zero …","A bracketed character class set, which may contain zero …","<code>(a)</code>","The capturing group limit was exceeded.","A capture name.","<code>(?P<name>a)</code>","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","<code>i</code>","A single character class expression.","A single character class. This includes all forms of …","An ASCII character class.","The available ASCII character classes.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","An invalid escape sequence was found in a character class …","A Perl character class.","The available Perl character classes.","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","A character class set.","A Unicode character class set operation.","The type of a Unicode character class set operation.","A single component of a character class set.","A single character class range in a set.","A union of items inside a character class set.","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","A Unicode character class.","The available forms of Unicode character classes.","The type of op used in a Unicode character class.","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","A property set to a specific value using a colon, e.g., …","A comment from a regular expression with an associated …","A concatenation of regular expressions.","A concatenation of regular expressions.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was …","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","Decimal numbers.","<code>[0-9]</code>","The “any character” class.","<code>s</code>","An empty regex that matches everything.","An empty item.","<code>$</code>","<code>\\\\z</code>","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>…","An error that visiting an AST might return.","An error that occurred while parsing a regular expression …","The type of an error that occurred while building an AST.","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","<code>{m}</code>","A single flag.","A single flag in a group.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The negation operator was used twice, e.g., <code>-i-s</code>.","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A group of flags.","A set of flags, e.g., <code>(?is)</code>.","A single item in a group of flags.","The kind of an item in a group of flags.","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","<code>[!-~]</code>","A grouped regular expression.","A grouped regular expression.","The kind of a group.","A duplicate capture name was found.","A capture group name is empty, e.g., <code>(?P<>abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>></code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The literal is written as a hex code with a bracketed …","The literal is written as a hex code with a fixed number …","The type of a Unicode hex literal.","<code>x</code>","The intersection of two sets, e.g., <code>\\\\pN&&[a-z]</code>.","An item, which can be a single literal, range, nested …","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","A single literal expression.","A single character literal, which includes escape …","A single literal.","The kind of a single literal expression.","<code>[a-z]</code>","<code>m</code>","A binary property, general category or script. The string …","A property name and an associated value.","A negation operator applied to all subsequent flags in …","The nest limit was exceeded. The limit stored here is the …","<code>(?:a)</code> and <code>(?i:a)</code>","A property that isn’t a particular value, e.g., …","<code>\\\\B</code>","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","<code>+</code>","The result of visiting an AST.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A single position in a regular expression.","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","The literal is written as an escape because it is …","A range between two literals.","<code>{m,n}</code>","A repetition operation applied to a regular expression.","A repetition operator applied to an arbitrary regular …","An opening <code>{</code> was not followed by a valid decimal value. …","The range provided in a counted repetition operator is …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","The kind of a repetition operator.","A repetition operator was applied to a missing …","The repetition operator itself.","A range repetition operator.","A group of flags that is not applied to a particular …","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","Whitespace.","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","Span represents the position information of a single AST …","The literal is written as a specially recognized escape, …","The type of a special literal.","<code>^</code>","<code>\\\\A</code>","<code>U</code>","The symmetric difference of two sets. The symmetric …","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","<code>u</code>","The Unicode class is not valid. This typically occurs …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A union of items.","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","<code>[A-Z]</code>","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","A trait for visiting an abstract syntax tree (AST) in …","An abstract syntax tree for a singular expression along …","Word characters.","<code>[0-9A-Za-z_]</code>","<code>\\\\b</code>","A <code>\\\\x</code> prefix. When used without brackets, this form is …","<code>[0-9A-Fa-f]</code>","<code>*</code>","<code>?</code>","Add the given item to this sequence of flags.","The actual ast.","The regular expression under repetition.","The regular expression in this group.","The alternate regular expressions.","The concatenation regular expressions.","Return an auxiliary span. This span exists only for some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The Unicode scalar value corresponding to this literal.","Returns the capture index of this group, if this is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The approximate column number, starting at <code>1</code>.","The comment text, starting with the first character …","All comments found in the original regular expression.","","The number of digits that must be used with this literal …","","","The end byte offset.","The end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","Returns the state of the given flag in this set.","If this group is non-capturing, then this returns the …","The actual sequence of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the corresponding ClassAsciiKind variant for the …","Whether this operation was applied greedily or not.","The capture index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return this alternation as an AST.","Return this concatenation as an AST.","Return this union as a character class set item.","Returns true if and only if this group is capturing.","Returns true if and only if this span is empty. That is, …","Return true if and only if this Ast is empty.","Whether the op is an equality op or not.","Returns true if this class has been negated.","Returns true if and only if this item is a negation …","Returns true if and only if this span occurs on a single …","Returns true if and only if this character class range is …","Returns true if and only if this repetition range is …","The sequence of items that make up this union.","A sequence of flag items. Each item is either a flag or a …","Return the type of this error.","The kind of this literal.","The kind of Perl class.","The kind of ASCII class.","The kind of Unicode class.","The type of this set. A set is either a normal union of …","The type of this set operation.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","The type of operation.","The kind of this group.","The kind of this item.","The left hand side of the operation.","The line number, starting at <code>1</code>.","The capture name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","Whether this class is negated or not.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","Create a new span with the given positions.","Create a new position with the given information.","The absolute offset of this position, starting at <code>0</code> from …","The actual operation.","This module provides a regular expression parser.","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Ast</code>.","Push a new item in this union.","The right hand side of the operation.","Return the span at which this error occurred.","Return the span of this abstract syntax tree.","Return the span of this character class.","Return the span of this character class set.","Return the span of this character class set item.","The span of this comment, including the beginning <code>#</code> and …","The span of this alternation.","The span of this concatenation.","The span of this literal.","The span of this class.","The span of this class.","The span of this class.","The span of this class.","The span of this range.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The span of this assertion.","The span of this operation.","The span of this operator. This includes things like <code>+</code>, <code>*?</code>…","The span of this group.","The span of this capture name.","The span of these flags, including the grouping …","The span of this group of flags.","The span of this item.","Create a new span using the given position as the start …","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","The start byte offset.","The start of this rangeuild a set from a union.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called between the left hand and right …","This method is called between the left hand and right …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> before …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> before descending into …","Create a new span by replacing the ending the position …","Create a new span by replacing the starting the position …","The property name (which may be empty).","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property value (which may be empty).","The position of the original flag. The error position …","The position of the original negation operator. The error …","The position of the initial occurrence of the capture …","A regular expression parser.","A builder for a regular expression parser.","","","","","Build a parser from this configuration with the given …","","","","","","","","","","Enable verbose mode in the regular expression.","","","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract …","","","","","","","","","A printer for a regular expression abstract syntax tree.","","","","","","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","An alternation of expressions. An alternation always has …","The high-level intermediate representation for an anchor …","An anchor assertion. An anchor assertion match always has …","Match an ASCII-only word boundary. That is, this matches …","Match an ASCII-only negation of a word boundary.","Matches a sub-expression at least this many times.","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …","A single character represented by an arbitrary byte.","A set of characters represented by arbitrary bytes (one …","A normal unnamed capturing group.","A named capturing group.","An error that occurs when Unicode-aware simple case …","The high-level intermediate representation of a character …","A single character class that matches any of the …","A set of characters represented by arbitrary bytes (where …","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","A set of characters represented by Unicode scalar values.","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode …","A concatenation of expressions. A concatenation always …","The empty regular expression, which matches everything, …","This occurs when the translator attempts to construct a …","Match the end of a line or the end of text. Specifically, …","Match the end of text. Specifically, this matches at the …","An error that visiting an HIR might return.","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","The type of an error that occurred while building an <code>Hir</code>.","Matches a sub-expression exactly this many times.","The high-level intermediate representation for a group.","A possibly capturing group, which contains a child …","The kind of group.","A high-level intermediate representation (HIR) for a …","The kind of an arbitrary <code>Hir</code> expression.","This error occurs when translating a pattern that could …","The high-level intermediate representation of a literal.","A single literal character that matches exactly this …","A non-capturing group.","Matches a sub-expression one or more times.","The result of visiting an HIR.","Matches a sub-expression within a bounded range of times.","The high-level intermediate representation of a …","A repetition operation applied to a child expression.","The kind of a repetition operator.","The kind of a counted repetition operator.","Match the beginning of a line or the beginning of text. …","Match the beginning of text. Specifically, this matches …","A single character represented by a Unicode scalar value.","A set of characters represented by Unicode scalar values.","Match a Unicode-aware word boundary. That is, this …","This occurs when the Unicode simple case mapping tables …","Match a Unicode-aware negation of a word boundary.","This error occurs when a Unicode feature is used when …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>…","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","A trait for visiting the high-level IR (HIR) in depth …","The high-level intermediate representation for a …","A word boundary assertion, which may or may not be …","Matches a sub-expression zero or more times.","Matches a sub-expression zero or one times.","Returns the alternation of the given expressions.","Creates an anchor assertion HIR expression.","Build an HIR expression for <code>(?s).</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply Unicode simple case folding to this character …","Expand this character class such that it contains all …","Expand this character class such that it contains all …","Creates a class HIR expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the concatenation of the given expressions.","","","","Subtract the given character class from this character …","Subtract the given byte class from this byte class, in …","Build an HIR expression for <code>.</code>.","","Returns an empty HIR expression.","Create a new class with no ranges.","Create a new class with no ranges.","Return the end of this range.","Return the end of this range.","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this repetition operator is greedy or not. A …","Creates a group HIR expression.","Returns true if and only if this kind has any (including …","The expression inside the capturing group, which may be …","The expression being repeated.","Intersect this character class with the given character …","Intersect this byte class with the given byte class, in …","","","","","","","","","","","","","","","","","","","","","","","Consumes ownership of this HIR expression and returns its …","Returns true if and only if this character class will …","Returns true if and only if this character class will …","Returns true if and only if this entire HIR expression is …","Return true if and only if this HIR is either a simple …","Return true if and only if this HIR will always match …","Returns true if and only if this character class will …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR contains any …","Return true if and only if this HIR contains any …","Return true if and only if this HIR is the empty regular …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is a simple literal. …","Return true if and only if the empty string is part of …","Returns true if and only if this repetition operator …","Returns true if and only if this word boundary assertion …","Returns true if and only if this literal corresponds to a …","Return an iterator over all ranges in this class.","Return an iterator over all ranges in this class.","Return the type of this error.","Returns a reference to the underlying HIR kind.","The kind of this group. If it is a capturing group, then …","The kind of this repetition operator.","Provides routines for extracting literal prefixes and …","Creates a literal HIR expression.","","","","","","","","","","","","","","","Negate this character class in place.","Negate this character class.","Negate this byte class.","Create a new class from a sequence of ranges.","Create a new Unicode scalar value range for a character …","Create a new class from a sequence of ranges.","Create a new byte range for a character class.","","","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Hir</code>.","Add a new range to this set.","Add a new range to this set.","Return the underlying ranges as a slice.","Return the underlying ranges as a slice.","Creates a repetition HIR expression.","Return the span at which this error occurred.","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","Return the start of this range.","Return the start of this range.","Compute the symmetric difference of the given character …","Compute the symmetric difference of the given byte …","","","","","","","","","","","","","","","","","","","","","","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","Expand this character class such that it contains all …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Union this character class with the given character …","Union this byte class with the given byte class, in place.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> before descending into …","Creates a word boundary assertion HIR expression.","The capture index of the group.","The name of the group.","A single member of a set of literals extracted from a …","A set of literal byte strings extracted from a regular …","Adds the given literal to this set.","Extends each literal in this set with the byte class …","Extends each literal in this set with the character class …","Returns true if all members in this set are complete.","Returns true if any member in this set is complete.","","","","","","Clears this set of all members.","","","","","","Returns true if this set contains an empty literal.","Extends each literal in this set with the bytes given.","Extends this set with another set.","Cuts every member of this set. When a member is cut, it …","Cuts this literal.","","","Returns a new empty set of literals using default limits.","Returns a new complete empty literal.","","","","","","","","","Returns true if this literal was “cut.”","Returns true if this set is empty or if all of its …","Get the character class size limit for this set.","Get the approximate size limit (in bytes) of this set.","Returns the set of literals as a slice. Its order is …","Returns the longest common prefix of all members in this …","Returns the longest common suffix of all members in this …","Returns the length of the smallest literal.","","Returns a new complete literal with the bytes given.","","Returns a set of literal prefixes extracted from the …","Reverses all members in place.","Limits the size of character(or byte) classes considered.","Set the approximate size limit (in bytes) of this set.","Returns a set of literal suffixes extracted from the …","Returns a new empty set of literals using this set’s …","","","Returns a new set of literals with the given number of …","","","","","","","Returns a new set of prefixes of this set of literals …","Returns a new set of suffixes of this set of literals …","Unions this set with another set.","Unions the prefixes from the given expression to this set.","Unions the suffixes from the given expression to this set.","A printer for a regular expression’s high-level …","","","","","","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","A translator maps abstract syntax to a high level …","A builder for constructing an AST->HIR translator.","When enabled, translation will permit the construction of …","","","","","Build a translator using the current configuration.","Enable or disable the case insensitive flag (<code>i</code>) by …","","","","","","Enable or disable the “dot matches any character” …","","","","","","","Enable or disable the multi-line matching flag (<code>m</code>) by …","Create a new translator builder with a default c …","Create a new translator using the default configuration.","Enable or disable the “swap greed” flag (<code>U</code>) by …","","","Translate the given abstract syntax tree (AST) into a …","","","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Four successive byte ranges.","One byte range.","Three successive byte ranges.","Two successive byte ranges.","A single inclusive range of UTF-8 bytes.","Utf8Sequence represents a sequence of byte ranges.","An iterator over ranges of matching UTF-8 byte sequences.","Returns the underlying sequence of byte ranges as a slice.","","","","","","","","","","","","","End of byte range (inclusive).","","","","","","","","","","","","Returns the number of byte ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches …","Returns true if and only if the given byte is in this …","","","Create a new iterator over UTF-8 byte ranges for the …","","","","Reverses the ranges in this sequence.","Start of byte range (inclusive).","","","","","","","","","","",""],"i":[0,1,0,0,0,1,0,2,0,1,2,3,4,1,2,3,4,2,2,1,2,3,1,2,3,2,1,2,1,0,0,1,1,2,3,4,4,1,1,1,2,3,4,0,2,1,2,3,4,0,0,0,2,1,2,2,3,2,3,2,1,2,3,1,4,1,2,3,4,1,2,3,4,0,1,2,3,4,2,0,5,5,0,6,5,7,0,6,0,0,8,9,10,5,8,11,7,12,13,0,12,9,14,0,6,0,0,0,13,0,0,13,13,0,0,0,0,0,0,13,0,0,0,5,15,0,0,6,13,13,16,17,5,6,14,6,7,18,18,15,19,0,0,13,13,13,13,13,8,0,20,13,13,13,13,13,0,6,0,0,9,5,0,6,0,13,13,13,13,13,13,21,21,0,14,16,10,9,0,6,7,0,5,14,22,22,20,13,12,15,18,21,22,23,19,11,7,0,5,5,21,7,23,0,6,13,13,13,0,13,0,0,0,9,17,5,0,21,0,18,18,14,16,9,11,7,14,13,24,24,7,13,13,5,21,9,0,0,17,5,18,24,5,23,23,25,26,27,28,29,30,31,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,35,35,28,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,32,33,33,34,26,31,24,6,10,32,40,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,19,25,28,46,31,31,13,13,32,33,26,34,6,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,5,27,45,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,29,30,41,28,32,6,15,38,20,32,40,8,41,25,31,35,36,37,38,39,42,43,44,28,47,42,33,45,31,13,32,33,26,34,6,29,30,35,21,11,36,37,38,22,39,10,7,40,41,42,43,27,44,23,8,28,12,45,46,25,47,20,36,37,38,39,32,33,33,27,0,32,33,31,0,41,42,31,6,11,10,7,34,29,30,35,36,37,38,39,40,41,42,43,27,44,28,45,46,25,47,32,19,19,32,40,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,6,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,10,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,32,32,48,48,48,49,50,51,0,0,52,53,52,53,52,52,53,52,53,52,52,53,52,53,52,52,53,52,52,53,52,53,53,52,53,52,53,52,53,52,53,0,54,54,54,54,54,54,54,54,54,54,55,0,55,56,56,57,57,58,59,60,60,0,0,55,0,0,0,0,0,0,55,55,61,62,62,63,0,0,57,0,55,0,0,0,61,0,55,60,64,63,64,0,55,0,0,62,62,58,59,56,61,56,61,61,61,61,0,0,55,64,64,65,65,65,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,59,67,70,65,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,69,72,65,69,72,66,67,70,65,65,65,67,70,69,72,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,63,66,66,61,61,65,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,74,65,55,73,74,67,70,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,68,71,65,67,70,65,65,65,59,65,65,65,65,55,65,65,65,65,74,56,58,67,70,66,65,73,74,0,65,66,65,55,58,59,67,69,70,72,73,60,74,64,57,59,67,70,67,69,70,72,68,71,69,72,66,0,67,70,67,70,65,66,63,63,69,72,67,70,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,66,61,65,75,0,67,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,67,70,0,63,63,63,63,63,63,65,76,76,0,0,77,77,77,77,77,78,77,78,77,78,77,77,78,77,78,78,77,77,77,77,78,78,78,77,78,77,78,77,78,77,78,77,78,78,77,77,77,77,77,77,77,77,78,78,77,77,77,77,77,77,77,78,77,77,78,77,78,77,78,77,77,77,77,77,0,79,79,79,79,79,79,79,79,79,79,0,0,80,80,81,80,81,80,80,80,81,80,81,80,80,80,81,80,81,80,81,80,80,81,80,80,81,81,80,81,80,81,80,81,80,82,82,82,82,0,0,0,82,83,82,84,83,82,84,82,84,82,84,82,84,84,82,84,82,84,83,82,84,83,82,84,83,82,82,84,82,84,83,83,82,84,82,84,82,84,83,82,84,83,82,84,83,82,84],"f":[null,null,null,null,null,null,null,[[["bool",15]],["parserbuilder",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parser",3]],[[["bool",15]],["parserbuilder",3]],[[],["error",4]],[[],["parserbuilder",3]],[[],["parser",3]],[[]],[[]],[[]],[[],["parserbuilder",3]],[[],["str",15]],[[["bool",15]],["parserbuilder",3]],[[["error",4]],["bool",15]],[[["str",15]],["string",3]],[[["string",3],["str",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["error",4]],[[]],[[["error",3]],["error",4]],[[]],[[]],[[]],null,[[["bool",15]],["parserbuilder",3]],[[]],[[]],[[]],[[]],[[["char",15]],["bool",15]],[[["u8",15]],["bool",15]],[[["char",15]],["bool",15]],[[["bool",15]],["parserbuilder",3]],[[["error",4]],["bool",15]],[[["u32",15]],["parserbuilder",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[["bool",15]],["parserbuilder",3]],[[["str",15]],[["hir",3],["result",6]]],[[["bool",15]],["parserbuilder",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],[["bool",15],["result",4],["unicodeworderror",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["parserbuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["flagsitem",3]],[["option",4],["usize",15]]],null,null,null,null,null,[[],[["option",4],["span",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["u8",15]]],null,[[],[["u32",15],["option",4]]],[[],["error",3]],[[],["errorkind",4]],[[],["span",3]],[[],["position",3]],[[],["withcomments",3]],[[],["comment",3]],[[],["ast",4]],[[],["alternation",3]],[[],["concat",3]],[[],["literal",3]],[[],["literalkind",4]],[[],["specialliteralkind",4]],[[],["hexliteralkind",4]],[[],["class",4]],[[],["classperl",3]],[[],["classperlkind",4]],[[],["classascii",3]],[[],["classasciikind",4]],[[],["classunicode",3]],[[],["classunicodekind",4]],[[],["classunicodeopkind",4]],[[],["classbracketed",3]],[[],["classset",4]],[[],["classsetitem",4]],[[],["classsetrange",3]],[[],["classsetunion",3]],[[],["classsetbinaryop",3]],[[],["classsetbinaryopkind",4]],[[],["assertion",3]],[[],["assertionkind",4]],[[],["repetition",3]],[[],["repetitionop",3]],[[],["repetitionkind",4]],[[],["repetitionrange",4]],[[],["group",3]],[[],["groupkind",4]],[[],["capturename",3]],[[],["setflags",3]],[[],["flags",3]],[[],["flagsitem",3]],[[],["flagsitemkind",4]],[[],["flag",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["span",3]],["ordering",4]],[[["position",3]],["ordering",4]],null,null,null,[[],["str",15]],[[],["u32",15]],[[]],[[]],null,null,[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["span",3]],["bool",15]],[[["position",3]],["bool",15]],[[["withcomments",3]],["bool",15]],[[["comment",3]],["bool",15]],[[["ast",4]],["bool",15]],[[["alternation",3]],["bool",15]],[[["concat",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["literalkind",4]],["bool",15]],[[["specialliteralkind",4]],["bool",15]],[[["hexliteralkind",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classperl",3]],["bool",15]],[[["classperlkind",4]],["bool",15]],[[["classascii",3]],["bool",15]],[[["classasciikind",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicodekind",4]],["bool",15]],[[["classunicodeopkind",4]],["bool",15]],[[["classbracketed",3]],["bool",15]],[[["classset",4]],["bool",15]],[[["classsetitem",4]],["bool",15]],[[["classsetrange",3]],["bool",15]],[[["classsetunion",3]],["bool",15]],[[["classsetbinaryop",3]],["bool",15]],[[["classsetbinaryopkind",4]],["bool",15]],[[["assertion",3]],["bool",15]],[[["assertionkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionop",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["capturename",3]],["bool",15]],[[["setflags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flagsitem",3]],["bool",15]],[[["flagsitemkind",4]],["bool",15]],[[["flag",4]],["bool",15]],[[],["result",4]],[[["flag",4]],[["bool",15],["option",4]]],[[],[["flags",3],["option",4]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["classasciikind",4],["option",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ast",4]],[[],["ast",4]],[[],["classsetitem",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["errorkind",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["span",3]],["bool",15]],[[["position",3]],["bool",15]],[[["withcomments",3]],["bool",15]],[[["comment",3]],["bool",15]],[[["ast",4]],["bool",15]],[[["alternation",3]],["bool",15]],[[["concat",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["literalkind",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classperl",3]],["bool",15]],[[["classascii",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicodekind",4]],["bool",15]],[[["classbracketed",3]],["bool",15]],[[["classset",4]],["bool",15]],[[["classsetitem",4]],["bool",15]],[[["classsetrange",3]],["bool",15]],[[["classsetunion",3]],["bool",15]],[[["classsetbinaryop",3]],["bool",15]],[[["assertion",3]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionop",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["capturename",3]],["bool",15]],[[["setflags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flagsitem",3]],["bool",15]],[[["flagsitemkind",4]],["bool",15]],null,null,null,null,[[["position",3]],["span",3]],[[["usize",15]],["position",3]],null,null,null,[[["span",3]],[["option",4],["ordering",4]]],[[["position",3]],[["option",4],["ordering",4]]],[[],["str",15]],null,[[["classsetitem",4]]],null,[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["position",3]],["span",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["classsetunion",3]],["classset",4]],[[["ast",4],["visitor",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[["position",3]],["span",3]],[[["position",3]],["span",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["parser",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[]],[[]],[[],["parserbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["bool",15]],["parserbuilder",3]],[[]],[[]],[[["u32",15]],["parserbuilder",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[["bool",15]],["parserbuilder",3]],[[["str",15]],[["ast",4],["error",3],["result",4]]],[[["str",15]],[["result",4],["withcomments",3],["error",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["printer",3]],[[["write",8],["ast",4]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3],["hir",3]],["hir",3]],[[["anchor",4]],["hir",3]],[[["bool",15]],["hir",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["class",4]],["hir",3]],[[],["error",3]],[[],["errorkind",4]],[[],["hir",3]],[[],["hirkind",4]],[[],["literal",4]],[[],["class",4]],[[],["classunicode",3]],[[],["classunicoderange",3]],[[],["classbytes",3]],[[],["classbytesrange",3]],[[],["anchor",4]],[[],["wordboundary",4]],[[],["group",3]],[[],["groupkind",4]],[[],["repetition",3]],[[],["repetitionkind",4]],[[],["repetitionrange",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["classunicoderange",3]],["ordering",4]],[[["classbytesrange",3]],["ordering",4]],[[["vec",3],["hir",3]],["hir",3]],[[],["classunicoderange",3]],[[],["classbytesrange",3]],[[],["str",15]],[[["classunicode",3]]],[[["classbytes",3]]],[[["bool",15]],["hir",3]],[[]],[[],["hir",3]],[[],["classunicode",3]],[[],["classbytes",3]],[[],["char",15]],[[],["u8",15]],[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["hir",3]],["bool",15]],[[["hirkind",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicoderange",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classbytesrange",3]],["bool",15]],[[["anchor",4]],["bool",15]],[[["wordboundary",4]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["group",3]],["hir",3]],[[],["bool",15]],null,null,[[["classunicode",3]]],[[["classbytes",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hirkind",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["classunicodeiter",3]],[[],["classbytesiter",3]],[[],["errorkind",4]],[[],["hirkind",4]],null,null,null,[[["literal",4]],["hir",3]],[[["error",3]],["bool",15]],[[["hir",3]],["bool",15]],[[["hirkind",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicoderange",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classbytesrange",3]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[]],[[]],[[]],[[],["classunicode",3]],[[["char",15]],["classunicoderange",3]],[[],["classbytes",3]],[[["u8",15]],["classbytesrange",3]],[[],[["option",4],["classunicoderange",3]]],[[],[["option",4],["classbytesrange",3]]],[[["classunicoderange",3]],[["option",4],["ordering",4]]],[[["classbytesrange",3]],[["option",4],["ordering",4]]],[[],["str",15]],null,[[["classunicoderange",3]]],[[["classbytesrange",3]]],[[]],[[]],[[["repetition",3]],["hir",3]],[[],["span",3]],[[]],[[]],[[],["char",15]],[[],["u8",15]],[[["classunicode",3]]],[[["classbytes",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],[["casefolderror",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["classunicode",3]]],[[["classbytes",3]]],[[["hir",3],["visitor",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[["wordboundary",4]],["hir",3]],null,null,null,null,[[["literal",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["literals",3]],[[],["literal",3]],[[]],[[]],[[["literal",3]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["literals",3]],["bool",15]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[],["literals",3]],[[],["literal",3]],[[["literals",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[["literals",3]],["bool",15]],[[["vec",3],["u8",15]],["literal",3]],[[["literal",3]],[["ordering",4],["option",4]]],[[["hir",3]],["literals",3]],[[]],[[["usize",15]],["literals",3]],[[["usize",15]],["literals",3]],[[["hir",3]],["literals",3]],[[],["literals",3]],[[]],[[]],[[["usize",15]],[["literals",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["literals",3]],[[],["literals",3]],[[["literals",3]],["bool",15]],[[["hir",3]],["bool",15]],[[["hir",3]],["bool",15]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["printer",3]],[[["hir",3],["write",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["bool",15]],["translatorbuilder",3]],[[]],[[]],[[]],[[]],[[],["translator",3]],[[["bool",15]],["translatorbuilder",3]],[[],["translatorbuilder",3]],[[],["translator",3]],[[]],[[]],[[],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["bool",15]],["translatorbuilder",3]],[[],["translatorbuilder",3]],[[],["translator",3]],[[["bool",15]],["translatorbuilder",3]],[[]],[[]],[[["ast",4],["str",15]],[["result",4],["error",3],["hir",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["translatorbuilder",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["utf8sequence",4]],[[],["utf8range",3]],[[]],[[]],[[["utf8sequence",4]],["ordering",4]],[[["utf8range",3]],["ordering",4]],null,[[["utf8sequence",4]],["bool",15]],[[["utf8range",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[["u8",15]],["bool",15]],[[["utf8sequence",4]],["bool",15]],[[["utf8range",3]],["bool",15]],[[["char",15]]],[[],["option",4]],[[["utf8sequence",4]],[["option",4],["ordering",4]]],[[["utf8range",3]],[["option",4],["ordering",4]]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Error"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"],[4,"ClassAsciiKind"],[4,"Ast"],[4,"ClassSetItem"],[4,"RepetitionRange"],[4,"SpecialLiteralKind"],[4,"ClassSet"],[4,"Class"],[4,"GroupKind"],[4,"ErrorKind"],[4,"Flag"],[4,"ClassUnicodeOpKind"],[4,"ClassSetBinaryOpKind"],[4,"ClassPerlKind"],[4,"AssertionKind"],[8,"Visitor"],[4,"FlagsItemKind"],[4,"LiteralKind"],[4,"ClassUnicodeKind"],[4,"RepetitionKind"],[4,"HexLiteralKind"],[3,"Flags"],[3,"WithComments"],[3,"Repetition"],[3,"Group"],[3,"Alternation"],[3,"Concat"],[3,"Error"],[3,"Span"],[3,"Position"],[3,"Comment"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"RepetitionOp"],[3,"CaptureName"],[3,"SetFlags"],[3,"FlagsItem"],[13,"NamedValue"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[4,"HirKind"],[4,"WordBoundary"],[4,"RepetitionRange"],[4,"Literal"],[4,"Class"],[4,"GroupKind"],[4,"ErrorKind"],[4,"Anchor"],[8,"Visitor"],[4,"RepetitionKind"],[3,"Hir"],[3,"Error"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"Group"],[3,"Repetition"],[3,"CaseFoldError"],[13,"CaptureName"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[4,"Utf8Sequence"],[3,"Utf8Sequences"],[3,"Utf8Range"]]},\
"thread_local":{"doc":"Per-object thread-local storage","t":[3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CachedIntoIter","CachedIterMut","CachedThreadLocal","IntoIter","IterMut","ThreadLocal","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","default","default","drop","fmt","fmt","from","from","from","from","from","from","get","get","get_or","get_or","get_or_default","get_or_default","get_or_try","get_or_try","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","iter_mut","iter_mut","new","new","next","next","next","next","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["thread_local","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator that moves out of a <code>CachedThreadLocal</code>.","Mutable iterator over the contents of a <code>CachedThreadLocal</code>.","Wrapper around <code>ThreadLocal</code> which adds a fast path for a …","An iterator that moves out of a <code>ThreadLocal</code>.","Mutable iterator over the contents of a <code>ThreadLocal</code>.","Thread-local variable wrapper","","","","","","","","","","","","","Removes all thread-specific values from the <code>ThreadLocal</code>, …","Removes all thread-specific values from the <code>ThreadLocal</code>, …","","","","","","","","","","","","Returns the element for the current thread, if it exists.","Returns the element for the current thread, if it exists.","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates a …","Returns the element for the current thread, or creates a …","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates it …","","","","","","","","","","","","","Returns a mutable iterator over the local values of all …","Returns a mutable iterator over the local values of all …","Creates a new empty <code>CachedThreadLocal</code>.","Creates a new empty <code>ThreadLocal</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,4,1,4,4,1,4,1,2,3,4,5,6,1,4,1,4,1,4,1,4,1,2,3,4,5,6,1,2,3,4,5,6,1,4,1,4,2,3,5,6,2,3,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cachedthreadlocal",3]],[[],["threadlocal",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cachedintoiter",3]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[],["cacheditermut",3]],[[],["itermut",3]],[[],["cachedthreadlocal",3]],[[],["threadlocal",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"CachedThreadLocal"],[3,"CachedIterMut"],[3,"CachedIntoIter"],[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};