var searchIndex = JSON.parse('{\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","i":[[0,"packed","aho_corasick","A lower level API for packed multiple substring search, …",null,null],[3,"Builder","aho_corasick::packed","A builder for constructing a packed searcher from a …",null,null],[3,"Config","","The configuration for a packed multiple pattern searcher.",null,null],[3,"FindIter","","An iterator over non-overlapping matches from a packed …",null,null],[4,"MatchKind","","A knob for controlling the match semantics of a packed …",null,null],[13,"LeftmostFirst","","Use leftmost-first match semantics, which reports …",0,null],[13,"LeftmostLongest","","Use leftmost-longest match semantics, which reports …",0,null],[3,"Searcher","","A packed searcher for quickly finding occurrences of …",null,null],[3,"AhoCorasick","aho_corasick","An automaton for searching multiple strings in linear …",null,null],[3,"AhoCorasickBuilder","","A builder for configuring an Aho-Corasick automaton.",null,null],[3,"FindIter","","An iterator of non-overlapping matches in a particular …",null,null],[3,"FindOverlappingIter","","An iterator of overlapping matches in a particular …",null,null],[4,"MatchKind","","A knob for controlling the match semantics of an …",null,null],[13,"Standard","","Use standard match semantics, which support overlapping …",1,null],[13,"LeftmostFirst","","Use leftmost-first match semantics, which reports …",1,null],[13,"LeftmostLongest","","Use leftmost-longest match semantics, which reports …",1,null],[3,"StreamFindIter","","An iterator that reports Aho-Corasick matches in a stream.",null,null],[3,"Error","","An error that occurred during the construction of an …",null,null],[4,"ErrorKind","","The kind of error that occurred.",null,null],[13,"StateIDOverflow","","An error that occurs when constructing an automaton would …",2,null],[12,"max","aho_corasick::ErrorKind","The maximum possible state ID.",3,null],[13,"PremultiplyOverflow","aho_corasick","An error that occurs when premultiplication of state IDs …",2,null],[12,"max","aho_corasick::ErrorKind","The maximum possible state id.",4,null],[12,"requested_max","","The maximum ID required by premultiplication.",4,null],[8,"StateID","aho_corasick","A trait describing the representation of an automaton\'s …",null,null],[10,"from_usize","","Convert from a <code>usize</code> to this implementation\'s …",5,[[]]],[10,"to_usize","","Convert this implementation\'s representation to a <code>usize</code>.",5,[[]]],[10,"max_id","","Return the maximum state identifier supported by this …",5,[[]]],[3,"Match","","A representation of a match reported by an Aho-Corasick …",null,null],[11,"pattern","","Returns the identifier of the pattern that matched.",6,[[]]],[11,"start","","The starting position of the match.",6,[[]]],[11,"end","","The ending position of the match.",6,[[]]],[11,"is_empty","","Returns true if and only if this match is empty. That is, …",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","aho_corasick::packed","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","aho_corasick","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"next","","",8,[[],[["option",4],["match",3]]]],[11,"next","","",9,[[],[["option",4],["match",3]]]],[11,"next","","",10,[[],[["option",4],["result",6]]]],[11,"next","aho_corasick::packed","",16,[[],[["option",4],["match",3]]]],[11,"clone","aho_corasick","",7,[[],["ahocorasick",3]]],[11,"clone","","",11,[[],["ahocorasickbuilder",3]]],[11,"clone","","",1,[[],["matchkind",4]]],[11,"clone","","",12,[[],["error",3]]],[11,"clone","","",2,[[],["errorkind",4]]],[11,"clone","aho_corasick::packed","",0,[[],["matchkind",4]]],[11,"clone","","",13,[[],["config",3]]],[11,"clone","","",14,[[],["builder",3]]],[11,"clone","","",15,[[],["searcher",3]]],[11,"clone","aho_corasick","",6,[[],["match",3]]],[11,"default","","",11,[[],["ahocorasickbuilder",3]]],[11,"default","","",1,[[],["matchkind",4]]],[11,"default","aho_corasick::packed","",0,[[],["matchkind",4]]],[11,"default","","",13,[[],["config",3]]],[11,"default","","",14,[[],["builder",3]]],[11,"eq","aho_corasick","",1,[[["matchkind",4]]]],[11,"eq","aho_corasick::packed","",0,[[["matchkind",4]]]],[11,"eq","aho_corasick","",6,[[["match",3]]]],[11,"ne","","",6,[[["match",3]]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","aho_corasick::packed","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","aho_corasick","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"hash","","",6,[[]]],[11,"description","","",12,[[]]],[11,"new","","Create a new Aho-Corasick automaton using the default …",7,[[],["ahocorasick",3]]],[11,"new_auto_configured","","Build an Aho-Corasick automaton with an automatically …",7,[[],["ahocorasick",3]]],[11,"is_match","","Returns true if and only if this automaton matches the …",7,[[["asref",8]]]],[11,"earliest_find","","Returns the location of the first detected match in …",7,[[["asref",8]],[["option",4],["match",3]]]],[11,"find","","Returns the location of the first match according to the …",7,[[["asref",8]],[["option",4],["match",3]]]],[11,"find_iter","","Returns an iterator of non-overlapping matches, using the …",7,[[],["finditer",3]]],[11,"find_overlapping_iter","","Returns an iterator of overlapping matches in the given …",7,[[],["findoverlappingiter",3]]],[11,"replace_all","","Replace all matches with a corresponding value in the …",7,[[],["string",3]]],[11,"replace_all_bytes","","Replace all matches using raw bytes with a corresponding …",7,[[],["vec",3]]],[11,"replace_all_with","","Replace all matches using a closure called on each match. …",7,[[["string",3]]]],[11,"replace_all_with_bytes","","Replace all matches using raw bytes with a closure called …",7,[[["vec",3]]]],[11,"stream_find_iter","","Returns an iterator of non-overlapping matches in the …",7,[[["read",8]],[["streamfinditer",3],["read",8]]]],[11,"stream_replace_all","","Search for and replace all matches of this automaton in …",7,[[],["result",6]]],[11,"stream_replace_all_with","","Search the given reader and replace all matches of this …",7,[[],["result",6]]],[11,"match_kind","","Returns the match kind used by this automaton.",7,[[],["matchkind",4]]],[11,"max_pattern_len","","Returns the length of the longest pattern matched by this …",7,[[]]],[11,"pattern_count","","Return the total number of patterns matched by this …",7,[[]]],[11,"supports_overlapping","","Returns true if and only if this automaton supports …",7,[[]]],[11,"supports_stream","","Returns true if and only if this automaton supports …",7,[[]]],[11,"heap_bytes","","Returns the approximate total amount of heap used by this …",7,[[]]],[11,"new","","Create a new builder for configuring an Aho-Corasick …",11,[[],["ahocorasickbuilder",3]]],[11,"build","","Build an Aho-Corasick automaton using the configuration …",11,[[],["ahocorasick",3]]],[11,"build_with_size","","Build an Aho-Corasick automaton using the configuration …",11,[[],[["error",3],["result",4],["ahocorasick",3]]]],[11,"auto_configure","","Automatically configure the settings on this builder …",11,[[],["ahocorasickbuilder",3]]],[11,"match_kind","","Set the desired match semantics.",11,[[["matchkind",4]],["ahocorasickbuilder",3]]],[11,"anchored","","Enable anchored mode, which requires all matches to start …",11,[[],["ahocorasickbuilder",3]]],[11,"ascii_case_insensitive","","Enable ASCII-aware case insensitive matching.",11,[[],["ahocorasickbuilder",3]]],[11,"dense_depth","","Set the limit on how many NFA states use a dense …",11,[[],["ahocorasickbuilder",3]]],[11,"dfa","","Compile the standard Aho-Corasick automaton into a …",11,[[],["ahocorasickbuilder",3]]],[11,"prefilter","","Enable heuristic prefilter optimizations.",11,[[],["ahocorasickbuilder",3]]],[11,"byte_classes","","Shrink the size of the transition alphabet by mapping …",11,[[],["ahocorasickbuilder",3]]],[11,"premultiply","","Premultiply state identifiers in the transition table. …",11,[[],["ahocorasickbuilder",3]]],[11,"kind","","Return the kind of this error.",12,[[],["errorkind",4]]],[11,"new","aho_corasick::packed","Create a new default configuration. A default …",13,[[],["config",3]]],[11,"builder","","Create a packed builder from this configuration. The …",13,[[],["builder",3]]],[11,"match_kind","","Set the match semantics for this configuration.",13,[[["matchkind",4]],["config",3]]],[11,"new","","Create a new builder for constructing a multi-pattern …",14,[[],["builder",3]]],[11,"build","","Build a searcher from the patterns added to this builder …",14,[[],[["option",4],["searcher",3]]]],[11,"add","","Add the given pattern to this set to match.",14,[[["asref",8]],["builder",3]]],[11,"extend","","Add the given iterator of patterns to this set to match.",14,[[],["builder",3]]],[11,"new","","A convenience function for constructing a searcher from …",15,[[],[["option",4],["searcher",3]]]],[11,"find","","Return the first occurrence of any of the patterns in …",15,[[["asref",8]],[["option",4],["match",3]]]],[11,"find_at","","Return the first occurrence of any of the patterns in …",15,[[["asref",8]],[["option",4],["match",3]]]],[11,"find_iter","","Return an iterator of non-overlapping occurrences of the …",15,[[],["finditer",3]]],[11,"match_kind","","Returns the match kind used by this packed searcher.",15,[[],["matchkind",4]]],[11,"minimum_len","","Returns the minimum length of a haystack that is required …",15,[[]]],[11,"heap_bytes","","Returns the approximate total amount of heap used by this …",15,[[]]]],"p":[[4,"MatchKind"],[4,"MatchKind"],[4,"ErrorKind"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"],[8,"StateID"],[3,"Match"],[3,"AhoCorasick"],[3,"FindIter"],[3,"FindOverlappingIter"],[3,"StreamFindIter"],[3,"AhoCorasickBuilder"],[3,"Error"],[3,"Config"],[3,"Builder"],[3,"Searcher"],[3,"FindIter"]]},\
"aoc_2020":{"doc":"Advent of Code (2020)IntroductionAdvent of Code (AOC) is …","i":[[5,"main","aoc_2020","",null,[[]]]],"p":[]},\
"day01":{"doc":"--- Day 1: Report Repair ---After saving Christmas five …","i":[[5,"main","day01","The main function prints out the results for part1 and …",null,[[]]],[5,"part1","","The part1 function calculates the result for part1",null,[[],[["result",4],["string",3]]]],[5,"part2","","The part2 function calculates the result for part2",null,[[],[["result",4],["string",3]]]],[5,"assert_indices_havent_crossed","","utility function that helps to check index bounds",null,[[]]]],"p":[]},\
"day02":{"doc":"--- Day 2: Password Philosophy ---Your flight departs in …","i":[[5,"main","day02","",null,[[]]],[5,"handle_row_p1","","part1 row handler",null,[[["string",3]]]],[5,"handle_row_p2","","part2 row handler",null,[[["string",3]]]],[5,"password_is_valid_p1","","determines if the password is valid (based on part1 …",null,[[["string",3]]]],[5,"password_is_valid_p2","","determines if the password is valid (based on part2 …",null,[[["string",3]]]],[5,"parse_input_row","","takes in a row in the format: policy: password and it …",null,[[["string",3]]]],[5,"parse_policy","","parses the policy into a two numbers and a letter",null,[[["string",3]]]]],"p":[]},\
"day03":{"doc":"--- Day 3: Toboggan Trajectory ---With the toboggan login …","i":[[5,"main","day03","",null,[[]]],[5,"count_trees_p1","","performs the tree counting for part1",null,[[]]],[5,"count_trees_p2","","performs the tree counting for part2",null,[[]]],[5,"count_trees","","counts the number of trees given a forest, a right_slope, …",null,[[]]]],"p":[]},\
"day04":{"doc":"--- Day 4: Passport Processing ---You arrive at the …","i":[[0,"passport","day04","",null,null],[6,"Passport","day04::passport","",null,null],[8,"ValidatePassport","","a trait that exposes methods to validate the passport for …",null,null],[10,"is_valid_p1","","method that validates a passport based on p1 criteria",0,[[]]],[10,"is_valid_p2","","method that validates a passport based on p2 criteria",0,[[]]],[10,"validate_byr","","validates birth year is a number between 1920 and 2002",0,[[["string",3]]]],[10,"validate_iyr","","validates issue year is a number between 2010 and 2020",0,[[["string",3]]]],[10,"validate_eyr","","validates expiration year is between 2020 and 2030",0,[[["string",3]]]],[10,"validate_hgt","","validates hgt is a number followed by either <code>cm</code> or <code>in</code>. if …",0,[[["string",3]]]],[10,"validate_hcl","","validates hcl is a hex color that starts with a \'#\' …",0,[[["string",3]]]],[10,"validate_ecl","","validates ecl is one of \\\"amb\\\", \\\"blu\\\", \\\"brn\\\", \\\"gry\\\", …",0,[[["string",3]]]],[10,"validate_pid","","validates pid is a nine digit number including leading …",0,[[["string",3]]]],[10,"validate_cid","","validates cid, automatically true if it exists",0,[[["string",3]]]],[5,"main","day04","",null,[[]]],[5,"parse_passport","","parses the key, value pairs from the passport string and …",null,[[],[["hashmap",3],["string",3]]]]],"p":[[8,"ValidatePassport"]]},\
"day05":{"doc":"--- Day 5: Binary Boarding ---You board your plane only …","i":[[5,"main","day05","",null,[[]]],[5,"get_row","","calculates the row from the first 7 characters of the …",null,[[]]],[5,"get_column","","calculates the column from the last 3 characters of the …",null,[[]]],[5,"get_seat_id","","calculates the seat_id from the row and column",null,[[]]],[5,"get_my_seat_id","","calculates <em>my</em> seat id",null,[[]]]],"p":[]},\
"day06":{"doc":"--- Day 6: Custom Customs ---As your flight approaches …","i":[[5,"main","day06","",null,[[]]],[5,"count_questions_from_anyone","","sum the count of the number of questions to which <em>anyone</em> …",null,[[]]],[5,"count_questions_from_everyone","","sum the count of the number of questions to which <em>everyone</em>…",null,[[]]]],"p":[]},\
"day07":{"doc":"--- Day 7: Handy Haversacks ---You land at the regional …","i":[[5,"main","day07","",null,[[]]],[5,"part1","","calculates the number of bag colors that can eventually …",null,[[]]],[5,"part2","","calculates the number of bags inside of a \\\"shiny gold\\\" bag",null,[[]]],[5,"update_bags","","iterates through the rules and checks for bag that …",null,[[["hashset",3]],[["string",3],["hashset",3]]]],[5,"count_bag","","counts the number of bags inside of <code>bag</code>. updates <code>cache</code> …",null,[[["hashmap",3],["string",3],["hashmap",3]]]],[5,"parse_rule","","parses a line into a rule. returns the bag and a set of …",null,[[]]],[5,"parse_rule2","","parses a line into a rule. returns the bag and a vector …",null,[[]]]],"p":[]},\
"day08":{"doc":"--- Day 8: Handheld Halting ---Your flight to the major …","i":[[0,"vm","day08","",null,null],[4,"OperationEnum","day08::vm","",null,null],[13,"ACC","","",0,null],[13,"JMP","","",0,null],[13,"NOP","","",0,null],[3,"Instruction","","",null,null],[12,"operation","","",1,null],[12,"argument","","",1,null],[3,"VM","","",null,null],[12,"acc","","",2,null],[12,"idx","","",2,null],[12,"instructions","","",2,null],[12,"has_run","","",2,null],[11,"new","","Creates a new VM instance given a vector of instructions. …",2,[[["instruction",3],["vec",3]],["vm",3]]],[11,"run","","Runs the VM. It will terminate once an instruction that …",2,[[]]],[11,"execute_instruction","","Executes a single instruction operation with its …",2,[[["instruction",3]]]],[11,"fix_instructions","","Attempts to change the nop and jmp instructions until it …",2,[[]]],[11,"does_terminate","","returns true when a sequence of instructions successfully …",2,[[]]],[5,"main","day08","",null,[[]]],[5,"part1","","",null,[[]]],[5,"part2","","",null,[[]]],[5,"parse_input","","",null,[[],[["instruction",3],["vec",3]]]],[11,"from","day08::vm","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"clone","","",0,[[],["operationenum",4]]],[11,"clone","","",1,[[],["instruction",3]]],[11,"eq","","",0,[[["operationenum",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]]],"p":[[4,"OperationEnum"],[3,"Instruction"],[3,"VM"]]},\
"day09":{"doc":"--- Day 9: Encoding Error ---With your neighbor happily …","i":[[5,"main","day09","",null,[[]]],[5,"part1","","finds the first number that does not have 2 numbers in …",null,[[]]],[5,"part2","","returns the min plus the max of a set of contiguous …",null,[[]]],[5,"parse_input","","parses the input from a String to a Vec",null,[[],["vec",3]]]],"p":[]},\
"day10":{"doc":"","i":[[5,"main","day10","",null,[[]]],[5,"part1","","",null,[[]]],[5,"part2","","",null,[[]]]],"p":[]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","i":[[8,"LazyStatic","lazy_static","Support trait for enabling a few common operation on lazy …",null,null],[5,"initialize","","Takes a shared reference to a lazy static and initializes …",null,[[]]],[14,"lazy_static","","",null,null]],"p":[]},\
"memchr":{"doc":"The <code>memchr</code> crate provides heavily optimized routines for …","i":[[3,"Memchr","memchr","An iterator for <code>memchr</code>.",null,null],[3,"Memchr2","","An iterator for <code>memchr2</code>.",null,null],[3,"Memchr3","","An iterator for <code>memchr3</code>.",null,null],[5,"memchr_iter","","An iterator over all occurrences of the needle in a …",null,[[],["memchr",3]]],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a …",null,[[],["memchr2",3]]],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a …",null,[[],["memchr3",3]]],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a …",null,[[],[["rev",3],["memchr",3]]]],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a …",null,[[],[["rev",3],["memchr2",3]]]],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a …",null,[[],[["rev",3],["memchr3",3]]]],[5,"memchr","","Search for the first occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memchr2","","Like <code>memchr</code>, but searches for either of two bytes instead …",null,[[],["option",4]]],[5,"memchr3","","Like <code>memchr</code>, but searches for any of three bytes instead …",null,[[],["option",4]]],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",null,[[],["option",4]]],[5,"memrchr2","","Like <code>memrchr</code>, but searches for either of two bytes …",null,[[],["option",4]]],[5,"memrchr3","","Like <code>memrchr</code>, but searches for any of three bytes instead …",null,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"next_back","","",0,[[],["option",4]]],[11,"next_back","","",1,[[],["option",4]]],[11,"next_back","","",2,[[],["option",4]]],[11,"next","","",0,[[],["option",4]]],[11,"size_hint","","",0,[[]]],[11,"next","","",1,[[],["option",4]]],[11,"size_hint","","",1,[[]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"new","","Creates a new iterator that yields all positions of …",0,[[],["memchr",3]]],[11,"new","","Creates a new iterator that yields all positions of …",1,[[],["memchr2",3]]],[11,"new","","Create a new <code>Memchr3</code> that\'s initialized to zero with a …",2,[[],["memchr3",3]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","i":[[0,"bytes","regex","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary …",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a …",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture …",null,null],[3,"Split","","Yields all substrings delimited by a regular expression …",null,null],[3,"SplitN","","Yields at most <code>N</code> substrings delimited by a regular …",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw …",null,null],[3,"Captures","","Captures represents a group of captured byte strings for …",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the …",null,null],[8,"Replacer","","Replacer describes types that can be used to replace …",null,null],[10,"replace_append","","Appends text to <code>dst</code> to replace the current match.",0,[[["captures",3],["vec",3]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",0,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",0,[[],["replacerref",3]]],[3,"ReplacerRef","","By-reference adaptor for a <code>Replacer</code>",null,null],[3,"NoExpand","","<code>NoExpand</code> indicates literal byte string replacement.",null,null],[12,"0","","",1,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions …",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex …",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex …",null,null],[11,"new","","Create a new regular expression builder with the given …",2,[[],["regexbuilder",3]]],[11,"build","","Consume the builder and compile the regular expression.",2,[[],[["result",4],["regex",3],["error",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",2,[[],["regexbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",2,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",2,[[],["regexbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",2,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",2,[[],["regexbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",2,[[],["regexbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",2,[[],["regexbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",2,[[],["regexbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",2,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",2,[[],["regexbuilder",3]]],[11,"new","","Create a new regular expression builder with the given …",3,[[],["regexsetbuilder",3]]],[11,"build","","Consume the builder and compile the regular expressions …",3,[[],[["regexset",3],["error",4],["result",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",3,[[],["regexsetbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",3,[[],["regexsetbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",3,[[],["regexsetbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",3,[[],["regexsetbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",3,[[],["regexsetbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",3,[[],["regexsetbuilder",3]]],[11,"start","","Returns the starting byte offset of the match in the …",4,[[]]],[11,"end","","Returns the ending byte offset of the match in the …",4,[[]]],[11,"range","","Returns the range over the starting and ending byte …",4,[[],["range",3]]],[11,"as_bytes","","Returns the matched text.",4,[[]]],[11,"new","","Compiles a regular expression. Once compiled, it can be …",5,[[],[["result",4],["regex",3],["error",4]]]],[11,"is_match","","Returns true if and only if there is a match for the …",5,[[]]],[11,"find","","Returns the start and end byte range of the …",5,[[],[["option",4],["match",3]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping …",5,[[],["matches",3]]],[11,"captures","","Returns the capture groups corresponding to the …",5,[[],[["option",4],["captures",3]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture …",5,[[],["capturematches",3]]],[11,"split","","Returns an iterator of substrings of <code>text</code> delimited by a …",5,[[],["split",3]]],[11,"splitn","","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …",5,[[],["splitn",3]]],[11,"replace","","Replaces the leftmost-first match with the replacement …",5,[[["replacer",8]],["cow",4]]],[11,"replace_all","","Replaces all non-overlapping matches in <code>text</code> with the …",5,[[["replacer",8]],["cow",4]]],[11,"replacen","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …",5,[[["replacer",8]],["cow",4]]],[11,"shortest_match","","Returns the end location of a match in the text given.",5,[[],["option",4]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search …",5,[[],["option",4]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at …",5,[[]]],[11,"find_at","","Returns the same as find, but starts the search at the …",5,[[],[["option",4],["match",3]]]],[11,"captures_read","","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …",5,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"captures_read_at","","Returns the same as <code>captures_read</code>, but starts the search …",5,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"as_str","","Returns the original string of this regex.",5,[[]]],[11,"capture_names","","Returns an iterator over the capture names.",5,[[],["capturenames",3]]],[11,"captures_len","","Returns the number of captures.",5,[[]]],[11,"capture_locations","","Returns an empty set of capture locations that can be …",5,[[],["capturelocations",3]]],[11,"get","","Returns the start and end positions of the Nth capture …",6,[[],["option",4]]],[11,"len","","Returns the total number of capturing groups.",6,[[]]],[11,"get","","Returns the match associated with the capture group at …",7,[[],[["option",4],["match",3]]]],[11,"name","","Returns the match for the capture group named <code>name</code>. If …",7,[[],[["option",4],["match",3]]]],[11,"iter","","An iterator that yields all capturing matches in the …",7,[[],["subcapturematches",3]]],[11,"expand","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …",7,[[["vec",3]]]],[11,"len","","Returns the number of captured groups.",7,[[]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",0,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",0,[[],["replacerref",3]]],[11,"new","","Create a new regex set with the given regular expressions.",8,[[],[["regexset",3],["error",4],["result",4]]]],[11,"empty","","Create a new empty regex set.",8,[[],["regexset",3]]],[11,"is_match","","Returns true if and only if one of the regexes in this …",8,[[]]],[11,"matches","","Returns the set of regular expressions that match in the …",8,[[],["setmatches",3]]],[11,"len","","Returns the total number of regular expressions in this …",8,[[]]],[11,"is_empty","","Returns <code>true</code> if this set contains no regular expressions.",8,[[]]],[11,"patterns","","Returns the patterns that this set will match on.",8,[[]]],[11,"matched_any","","Whether this set contains any matches.",9,[[]]],[11,"matched","","Whether the regex at the given index matched.",9,[[]]],[11,"len","","The total number of regexes in the set that created these …",9,[[]]],[11,"iter","","Returns an iterator over indexes in the regex that …",9,[[],["setmatchesiter",3]]],[4,"Error","regex","An error that occurred during parsing or compiling a …",null,null],[13,"Syntax","","A syntax error.",10,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The …",10,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexBuilder","","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions …",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex …",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex …",null,null],[5,"escape","","Escapes all regular expression meta characters in <code>text</code>.",null,[[],["string",3]]],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw …",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture …",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured strings for a …",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a …",null,null],[3,"NoExpand","","<code>NoExpand</code> indicates literal string replacement.",null,null],[12,"0","","",11,null],[3,"Regex","","A compiled regular expression for matching Unicode …",null,null],[8,"Replacer","","Replacer describes types that can be used to replace …",null,null],[10,"replace_append","","Appends text to <code>dst</code> to replace the current match.",12,[[["captures",3],["string",3]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",12,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",12,[[],["replacerref",3]]],[3,"ReplacerRef","","By-reference adaptor for a <code>Replacer</code>",null,null],[3,"Split","","Yields all substrings delimited by a regular expression …",null,null],[3,"SplitN","","Yields at most <code>N</code> substrings delimited by a regular …",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the …",null,null],[11,"from","regex::bytes","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"into_iter","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"into_iter","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"into_iter","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"into_iter","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"into_iter","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"into_iter","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"into_iter","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","regex","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"into_iter","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"into_iter","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"into_iter","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"into_iter","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"into_iter","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"into_iter","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"replace_append","regex::bytes","",19,[[["captures",3],["vec",3]]]],[11,"no_expansion","","",19,[[],[["cow",4],["option",4]]]],[11,"replace_append","","",1,[[["captures",3],["vec",3]]]],[11,"no_expansion","","",1,[[],[["option",4],["cow",4]]]],[11,"replace_append","regex","",38,[[["captures",3],["string",3]]]],[11,"no_expansion","","",38,[[],[["cow",4],["option",4]]]],[11,"replace_append","","",11,[[["captures",3],["string",3]]]],[11,"no_expansion","","",11,[[],[["cow",4],["option",4]]]],[11,"next_back","","",26,[[],["option",4]]],[11,"next_back","","",27,[[],["option",4]]],[11,"next_back","regex::bytes","",20,[[],["option",4]]],[11,"next_back","","",21,[[],["option",4]]],[11,"into_iter","regex","",25,[[]]],[11,"into_iter","regex::bytes","",9,[[]]],[11,"next","","",13,[[],[["option",4],["match",3]]]],[11,"next","","",14,[[],[["option",4],["captures",3]]]],[11,"next","","",15,[[],["option",4]]],[11,"next","","",16,[[],["option",4]]],[11,"next","","",17,[[],[["option",4],["option",4]]]],[11,"size_hint","","",17,[[]]],[11,"next","","",18,[[],[["option",4],["option",4]]]],[11,"next","regex","",26,[[],["option",4]]],[11,"size_hint","","",26,[[]]],[11,"next","","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","regex::bytes","",20,[[],["option",4]]],[11,"size_hint","","",20,[[]]],[11,"next","","",21,[[],["option",4]]],[11,"size_hint","","",21,[[]]],[11,"next","regex","",30,[[],[["option",4],["option",4]]]],[11,"size_hint","","",30,[[]]],[11,"next","","",31,[[],["option",4]]],[11,"next","","",32,[[],["option",4]]],[11,"next","","",35,[[],[["option",4],["option",4]]]],[11,"next","","",36,[[],[["option",4],["captures",3]]]],[11,"next","","",37,[[],[["option",4],["match",3]]]],[11,"clone","","",10,[[],["error",4]]],[11,"clone","regex::bytes","",4,[[],["match",3]]],[11,"clone","","",5,[[],["regex",3]]],[11,"clone","","",6,[[],["capturelocations",3]]],[11,"clone","","",18,[[],["subcapturematches",3]]],[11,"clone","regex","",24,[[],["regexset",3]]],[11,"clone","","",25,[[],["setmatches",3]]],[11,"clone","","",27,[[],["setmatchesiter",3]]],[11,"clone","regex::bytes","",8,[[],["regexset",3]]],[11,"clone","","",9,[[],["setmatches",3]]],[11,"clone","","",21,[[],["setmatchesiter",3]]],[11,"clone","regex","",28,[[],["match",3]]],[11,"clone","","",29,[[],["regex",3]]],[11,"clone","","",33,[[],["capturelocations",3]]],[11,"clone","","",35,[[],["subcapturematches",3]]],[11,"eq","","",10,[[["error",4]]]],[11,"ne","","",10,[[["error",4]]]],[11,"eq","regex::bytes","",4,[[["match",3]]]],[11,"ne","","",4,[[["match",3]]]],[11,"eq","regex","",28,[[["match",3]]]],[11,"ne","","",28,[[["match",3]]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","Shows the original regular expression.",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","regex","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","Shows the original regular expression.",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","regex::bytes","Shows the original regular expression.",5,[[["formatter",3]],["result",6]]],[11,"fmt","regex","Shows the original regular expression.",29,[[["formatter",3]],["result",6]]],[11,"index","regex::bytes","",7,[[]]],[11,"index","","",7,[[]]],[11,"index","regex","",34,[[]]],[11,"index","","",34,[[]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",5,[[],[["result",4],["regex",3],["error",4]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",29,[[],[["regex",3],["result",4],["error",4]]]],[11,"description","","",10,[[]]],[11,"new","","Create a new regular expression builder with the given …",22,[[],["regexbuilder",3]]],[11,"build","","Consume the builder and compile the regular expression.",22,[[],[["regex",3],["result",4],["error",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",22,[[],["regexbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",22,[[],["regexbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",22,[[],["regexbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",22,[[],["regexbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",22,[[],["regexbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",22,[[],["regexbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",22,[[],["regexbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",22,[[],["regexbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",22,[[],["regexbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",22,[[],["regexbuilder",3]]],[11,"new","","Create a new regular expression builder with the given …",23,[[],["regexsetbuilder",3]]],[11,"build","","Consume the builder and compile the regular expressions …",23,[[],[["regexset",3],["result",4],["error",4]]]],[11,"case_insensitive","","Set the value for the case insensitive (<code>i</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"multi_line","","Set the value for the multi-line matching (<code>m</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"dot_matches_new_line","","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …",23,[[],["regexsetbuilder",3]]],[11,"swap_greed","","Set the value for the greedy swap (<code>U</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (<code>x</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"unicode","","Set the value for the Unicode (<code>u</code>) flag.",23,[[],["regexsetbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",23,[[],["regexsetbuilder",3]]],[11,"size_limit","","Set the approximate size limit of the compiled regular …",23,[[],["regexsetbuilder",3]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",23,[[],["regexsetbuilder",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",23,[[],["regexsetbuilder",3]]],[11,"new","","Create a new regex set with the given regular expressions.",24,[[],[["regexset",3],["result",4],["error",4]]]],[11,"empty","","Create a new empty regex set.",24,[[],["regexset",3]]],[11,"is_match","","Returns true if and only if one of the regexes in this …",24,[[]]],[11,"matches","","Returns the set of regular expressions that match in the …",24,[[],["setmatches",3]]],[11,"len","","Returns the total number of regular expressions in this …",24,[[]]],[11,"is_empty","","Returns <code>true</code> if this set contains no regular expressions.",24,[[]]],[11,"patterns","","Returns the patterns that this set will match on.",24,[[]]],[11,"matched_any","","Whether this set contains any matches.",25,[[]]],[11,"matched","","Whether the regex at the given index matched.",25,[[]]],[11,"len","","The total number of regexes in the set that created these …",25,[[]]],[11,"iter","","Returns an iterator over indexes in the regex that …",25,[[],["setmatchesiter",3]]],[11,"start","","Returns the starting byte offset of the match in the …",28,[[]]],[11,"end","","Returns the ending byte offset of the match in the …",28,[[]]],[11,"range","","Returns the range over the starting and ending byte …",28,[[],["range",3]]],[11,"as_str","","Returns the matched text.",28,[[]]],[11,"new","","Compiles a regular expression. Once compiled, it can be …",29,[[],[["regex",3],["result",4],["error",4]]]],[11,"is_match","","Returns true if and only if there is a match for the …",29,[[]]],[11,"find","","Returns the start and end byte range of the …",29,[[],[["option",4],["match",3]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping …",29,[[],["matches",3]]],[11,"captures","","Returns the capture groups corresponding to the …",29,[[],[["option",4],["captures",3]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture …",29,[[],["capturematches",3]]],[11,"split","","Returns an iterator of substrings of <code>text</code> delimited by a …",29,[[],["split",3]]],[11,"splitn","","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …",29,[[],["splitn",3]]],[11,"replace","","Replaces the leftmost-first match with the replacement …",29,[[["replacer",8]],["cow",4]]],[11,"replace_all","","Replaces all non-overlapping matches in <code>text</code> with the …",29,[[["replacer",8]],["cow",4]]],[11,"replacen","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …",29,[[["replacer",8]],["cow",4]]],[11,"shortest_match","","Returns the end location of a match in the text given.",29,[[],["option",4]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search …",29,[[],["option",4]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at …",29,[[]]],[11,"find_at","","Returns the same as find, but starts the search at the …",29,[[],[["option",4],["match",3]]]],[11,"captures_read","","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …",29,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at …",29,[[["capturelocations",3]],[["option",4],["match",3]]]],[11,"as_str","","Returns the original string of this regex.",29,[[]]],[11,"capture_names","","Returns an iterator over the capture names.",29,[[],["capturenames",3]]],[11,"captures_len","","Returns the number of captures.",29,[[]]],[11,"capture_locations","","Returns an empty set of capture locations that can be …",29,[[],["capturelocations",3]]],[11,"get","","Returns the start and end positions of the Nth capture …",33,[[],["option",4]]],[11,"len","","Returns the total number of capturing groups.",33,[[]]],[11,"get","","Returns the match associated with the capture group at …",34,[[],[["option",4],["match",3]]]],[11,"name","","Returns the match for the capture group named <code>name</code>. If …",34,[[],[["option",4],["match",3]]]],[11,"iter","","An iterator that yields all capturing matches in the …",34,[[],["subcapturematches",3]]],[11,"expand","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …",34,[[["string",3]]]],[11,"len","","Returns the number of captured groups.",34,[[]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",12,[[],[["cow",4],["option",4]]]],[11,"by_ref","","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.",12,[[],["replacerref",3]]]],"p":[[8,"Replacer"],[3,"NoExpand"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","i":[[0,"ast","regex_syntax","Defines an abstract syntax for regular expressions.",null,null],[0,"parse","regex_syntax::ast","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[11,"new","","Create a new parser builder with a default configuration.",0,[[],["parserbuilder",3]]],[11,"build","","Build a parser from this configuration with the given …",0,[[],["parser",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",0,[[],["parserbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",0,[[],["parserbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",0,[[],["parserbuilder",3]]],[3,"Parser","","A regular expression parser.",null,null],[11,"new","","Create a new parser with a default configuration.",1,[[],["parser",3]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",1,[[],[["error",3],["ast",4],["result",4]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract …",1,[[],[["result",4],["withcomments",3],["error",3]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for <code>Ast</code>.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"new","","Create a new printer.",2,[[],["printer",3]]],[11,"print","","Print the given <code>Ast</code> to the given writer. The writer must …",2,[[["ast",4],["write",8]],["result",6]]],[5,"visit","regex_syntax::ast","Executes an implementation of <code>Visitor</code> in constant stack …",null,[[["visitor",8],["ast",4]],["result",4]]],[8,"Visitor","","A trait for visiting an abstract syntax tree (AST) in …",null,null],[16,"Output","","The result of visiting an AST.",3,null],[16,"Err","","An error that visiting an AST might return.",3,null],[10,"finish","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …",3,[[],["result",4]]],[11,"start","","This method is called before beginning traversal of the …",3,[[]]],[11,"visit_pre","","This method is called on an <code>Ast</code> before descending into …",3,[[["ast",4]],["result",4]]],[11,"visit_post","","This method is called on an <code>Ast</code> after descending all of …",3,[[["ast",4]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",3,[[],["result",4]]],[11,"visit_class_set_item_pre","","This method is called on every <code>ClassSetItem</code> before …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_item_post","","This method is called on every <code>ClassSetItem</code> after …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_binary_op_pre","","This method is called on every <code>ClassSetBinaryOp</code> before …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_post","","This method is called on every <code>ClassSetBinaryOp</code> after …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right …",3,[[["classsetbinaryop",3]],["result",4]]],[3,"Error","","An error that occurred while parsing a regular expression …",null,null],[11,"kind","","Return the type of this error.",4,[[],["errorkind",4]]],[11,"pattern","","The original pattern string in which this error occurred.",4,[[]]],[11,"span","","Return the span at which this error occurred.",4,[[],["span",3]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some …",4,[[],[["option",4],["span",3]]]],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",5,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class …",5,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid …",5,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. …",5,null],[13,"ClassUnclosed","","An opening <code>[</code> was found with no corresponding closing <code>]</code>.",5,null],[13,"DecimalEmpty","","Note that this error variant is no longer used. Namely, a …",5,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was …",5,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",5,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode …",5,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",5,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",5,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",5,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., <code>i-</code>.",5,null],[13,"FlagDuplicate","","A flag was used twice, e.g., <code>i-i</code>.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position …",6,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., <code>-i-s</code>.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error …",7,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., <code>(?</code>.",5,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., <code>a</code>.",5,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",5,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture …",8,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., <code>(?P<>abc)</code>.",5,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. …",5,null],[13,"GroupNameUnexpectedEof","","A closing <code>></code> could not be found for a capture group name.",5,null],[13,"GroupUnclosed","","An unclosed group, e.g., <code>(ab</code>.",5,null],[13,"GroupUnopened","","An unopened group, e.g., <code>ab)</code>.",5,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the …",5,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is …",5,null],[13,"RepetitionCountDecimalEmpty","","An opening <code>{</code> was not followed by a valid decimal value. …",5,null],[13,"RepetitionCountUnclosed","","An opening <code>{</code> was found with no corresponding closing <code>}</code>.",5,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing …",5,null],[13,"UnicodeClassInvalid","","The Unicode class is not valid. This typically occurs …",5,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced …",5,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE\'s look-around is used, this …",5,null],[3,"Span","","Span represents the position information of a single AST …",null,null],[12,"start","","The start byte offset.",9,null],[12,"end","","The end byte offset.",9,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at <code>0</code> from …",10,null],[12,"line","","The line number, starting at <code>1</code>.",10,null],[12,"column","","The approximate column number, starting at <code>1</code>.",10,null],[11,"new","","Create a new span with the given positions.",9,[[["position",3]],["span",3]]],[11,"splat","","Create a new span using the given position as the start …",9,[[["position",3]],["span",3]]],[11,"with_start","","Create a new span by replacing the starting the position …",9,[[["position",3]],["span",3]]],[11,"with_end","","Create a new span by replacing the ending the position …",9,[[["position",3]],["span",3]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single …",9,[[]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, …",9,[[]]],[11,"new","","Create a new position with the given information.",10,[[],["position",3]]],[3,"WithComments","","An abstract syntax tree for a singular expression along …",null,null],[12,"ast","","The actual ast.",11,null],[12,"comments","","All comments found in the original regular expression.",11,null],[3,"Comment","","A comment from a regular expression with an associated …",null,null],[12,"span","","The span of this comment, including the beginning <code>#</code> and …",12,null],[12,"comment","","The comment text, starting with the first character …",12,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",13,null],[13,"Flags","","A set of flags, e.g., <code>(?is)</code>.",13,null],[13,"Literal","","A single character literal, which includes escape …",13,null],[13,"Dot","","The \\\"any character\\\" class.",13,null],[13,"Assertion","","A single zero-width assertion.",13,null],[13,"Class","","A single character class. This includes all forms of …",13,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular …",13,null],[13,"Group","","A grouped regular expression.",13,null],[13,"Alternation","","An alternation of regular expressions.",13,null],[13,"Concat","","A concatenation of regular expressions.",13,null],[11,"span","","Return the span of this abstract syntax tree.",13,[[],["span",3]]],[11,"is_empty","","Return true if and only if this Ast is empty.",13,[[]]],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",14,null],[12,"asts","","The alternate regular expressions.",14,null],[11,"into_ast","","Return this alternation as an AST.",14,[[],["ast",4]]],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",15,null],[12,"asts","","The concatenation regular expressions.",15,null],[11,"into_ast","","Return this concatenation as an AST.",15,[[],["ast",4]]],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",16,null],[12,"kind","","The kind of this literal.",16,null],[12,"c","","The Unicode scalar value corresponding to this literal.",16,null],[11,"byte","","If this literal was written as a <code>\\\\x</code> hex escape, then this …",16,[[],["option",4]]],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.",17,null],[13,"Punctuation","","The literal is written as an escape because it is …",17,null],[13,"Octal","","The literal is written as an octal escape, e.g., <code>\\\\141</code>.",17,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number …",17,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed …",17,null],[13,"Special","","The literal is written as a specially recognized escape, …",17,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).",18,null],[13,"FormFeed","","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).",18,null],[13,"Tab","","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).",18,null],[13,"LineFeed","","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).",18,null],[13,"CarriageReturn","","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).",18,null],[13,"VerticalTab","","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).",18,null],[13,"Space","","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …",18,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A <code>\\\\x</code> prefix. When used without brackets, this form is …",19,null],[13,"UnicodeShort","","A <code>\\\\u</code> prefix. When used without brackets, this form is …",19,null],[13,"UnicodeLong","","A <code>\\\\U</code> prefix. When used without brackets, this form is …",19,null],[11,"digits","","The number of digits that must be used with this literal …",19,[[]]],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.",20,null],[13,"Perl","","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.",20,null],[13,"Bracketed","","A bracketed character class set, which may contain zero …",20,null],[11,"span","","Return the span of this character class.",20,[[],["span",3]]],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",21,null],[12,"kind","","The kind of Perl class.",21,null],[12,"negated","","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …",21,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",22,null],[13,"Space","","Whitespace.",22,null],[13,"Word","","Word characters.",22,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",23,null],[12,"kind","","The kind of ASCII class.",23,null],[12,"negated","","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …",23,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","<code>[0-9A-Za-z]</code>",24,null],[13,"Alpha","","<code>[A-Za-z]</code>",24,null],[13,"Ascii","","<code>[\\\\x00-\\\\x7F]</code>",24,null],[13,"Blank","","<code>[ \\\\t]</code>",24,null],[13,"Cntrl","","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>",24,null],[13,"Digit","","<code>[0-9]</code>",24,null],[13,"Graph","","<code>[!-~]</code>",24,null],[13,"Lower","","<code>[a-z]</code>",24,null],[13,"Print","","<code>[ -~]</code>",24,null],[13,"Punct","","<code>[!-/:-@\\\\[-</code>{-~]`",24,null],[13,"Space","","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>",24,null],[13,"Upper","","<code>[A-Z]</code>",24,null],[13,"Word","","<code>[0-9A-Za-z_]</code>",24,null],[13,"Xdigit","","<code>[0-9A-Fa-f]</code>",24,null],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the …",24,[[],[["option",4],["classasciikind",4]]]],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",25,null],[12,"negated","","Whether this class is negated or not.",25,null],[12,"kind","","The kind of Unicode class.",25,null],[11,"is_negated","","Returns true if this class has been negated.",25,[[]]],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., <code>\\\\pN</code>.",26,null],[13,"Named","","A binary property, general category or script. The string …",26,null],[13,"NamedValue","","A property name and an associated value.",26,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate <code>name</code> with <code>value</code>.",27,null],[12,"name","","The property name (which may be empty).",27,null],[12,"value","","The property value (which may be empty).",27,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>…",28,null],[13,"Colon","","A property set to a specific value using a colon, e.g., …",28,null],[13,"NotEqual","","A property that isn\'t a particular value, e.g., …",28,null],[11,"is_equal","","Whether the op is an equality op or not.",28,[[]]],[3,"ClassBracketed","","A bracketed character class, e.g., <code>[a-z0-9]</code>.",null,null],[12,"span","","The span of this class.",29,null],[12,"negated","","Whether this class is negated or not. e.g., <code>[a]</code> is not …",29,null],[12,"kind","","The type of this set. A set is either a normal union of …",29,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested …",30,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",30,null],[11,"union","","Build a set from a union.",30,[[["classsetunion",3]],["classset",4]]],[11,"span","","Return the span of this character class set.",30,[[],["span",3]]],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",31,null],[13,"Literal","","A single literal.",31,null],[13,"Range","","A range between two literals.",31,null],[13,"Ascii","","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.",31,null],[13,"Unicode","","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.",31,null],[13,"Perl","","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.",31,null],[13,"Bracketed","","A bracketed character class set, which may contain zero …",31,null],[13,"Union","","A union of items.",31,null],[11,"span","","Return the span of this character class set item.",31,[[],["span",3]]],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",32,null],[12,"start","","The start of this range.",32,null],[12,"end","","The end of this range.",32,null],[11,"is_valid","","Returns true if and only if this character class range is …",32,[[]]],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the <code>a-z0-9</code> …",33,null],[12,"items","","The sequence of items that make up this union.",33,null],[11,"push","","Push a new item in this union.",33,[[["classsetitem",4]]]],[11,"into_item","","Return this union as a character class set item.",33,[[],["classsetitem",4]]],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …",34,null],[12,"kind","","The type of this set operation.",34,null],[12,"lhs","","The left hand side of the operation.",34,null],[12,"rhs","","The right hand side of the operation.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., <code>\\\\pN&&[a-z]</code>.",35,null],[13,"Difference","","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric …",35,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",36,null],[12,"kind","","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.",36,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","<code>^</code>",37,null],[13,"EndLine","","<code>$</code>",37,null],[13,"StartText","","<code>\\\\A</code>",37,null],[13,"EndText","","<code>\\\\z</code>",37,null],[13,"WordBoundary","","<code>\\\\b</code>",37,null],[13,"NotWordBoundary","","<code>\\\\B</code>",37,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",38,null],[12,"op","","The actual operation.",38,null],[12,"greedy","","Whether this operation was applied greedily or not.",38,null],[12,"ast","","The regular expression under repetition.",38,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like <code>+</code>, <code>*?</code>…",39,null],[12,"kind","","The type of operation.",39,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","<code>?</code>",40,null],[13,"ZeroOrMore","","<code>*</code>",40,null],[13,"OneOrMore","","<code>+</code>",40,null],[13,"Range","","<code>{m,n}</code>",40,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","<code>{m}</code>",41,null],[13,"AtLeast","","<code>{m,}</code>",41,null],[13,"Bounded","","<code>{m,n}</code>",41,null],[11,"is_valid","","Returns true if and only if this repetition range is …",41,[[]]],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",42,null],[12,"kind","","The kind of this group.",42,null],[12,"ast","","The regular expression in this group.",42,null],[11,"flags","","If this group is non-capturing, then this returns the …",42,[[],[["flags",3],["option",4]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",42,[[]]],[11,"capture_index","","Returns the capture index of this group, if this is a …",42,[[],["option",4]]],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","<code>(a)</code>",43,null],[13,"CaptureName","","<code>(?P<name>a)</code>",43,null],[13,"NonCapturing","","<code>(?:a)</code> and <code>(?i:a)</code>",43,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",44,null],[12,"name","","The capture name.",44,null],[12,"index","","The capture index.",44,null],[3,"SetFlags","","A group of flags that is not applied to a particular …",null,null],[12,"span","","The span of these flags, including the grouping …",45,null],[12,"flags","","The actual sequence of flags.",45,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",46,null],[12,"items","","A sequence of flag items. Each item is either a flag or a …",46,null],[11,"add_item","","Add the given item to this sequence of flags.",46,[[["flagsitem",3]],["option",4]]],[11,"flag_state","","Returns the state of the given flag in this set.",46,[[["flag",4]],["option",4]]],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",47,null],[12,"kind","","The kind of this item.",47,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in …",48,null],[13,"Flag","","A single flag in a group.",48,null],[11,"is_negation","","Returns true if and only if this item is a negation …",48,[[]]],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","<code>i</code>",49,null],[13,"MultiLine","","<code>m</code>",49,null],[13,"DotMatchesNewLine","","<code>s</code>",49,null],[13,"SwapGreed","","<code>U</code>",49,null],[13,"Unicode","","<code>u</code>",49,null],[13,"IgnoreWhitespace","","<code>x</code>",49,null],[0,"hir","regex_syntax","Defines a high-level intermediate representation for …",null,null],[0,"literal","regex_syntax::hir","Provides routines for extracting literal prefixes and …",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular …",null,null],[3,"Literal","","A single member of a set of literals extracted from a …",null,null],[11,"empty","","Returns a new empty set of literals using default limits.",50,[[],["literals",3]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the …",50,[[["hir",3]],["literals",3]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the …",50,[[["hir",3]],["literals",3]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",50,[[]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",50,[[],["literals",3]]],[11,"limit_class","","Get the character class size limit for this set.",50,[[]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",50,[[],["literals",3]]],[11,"literals","","Returns the set of literals as a slice. Its order is …",50,[[]]],[11,"min_len","","Returns the length of the smallest literal.",50,[[],["option",4]]],[11,"all_complete","","Returns true if all members in this set are complete.",50,[[]]],[11,"any_complete","","Returns true if any member in this set is complete.",50,[[]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",50,[[]]],[11,"is_empty","","Returns true if this set is empty or if all of its …",50,[[]]],[11,"to_empty","","Returns a new empty set of literals using this set\'s …",50,[[],["literals",3]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this …",50,[[]]],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this …",50,[[]]],[11,"trim_suffix","","Returns a new set of literals with the given number of …",50,[[],[["literals",3],["option",4]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals …",50,[[],["literals",3]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals …",50,[[],["literals",3]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",50,[[["hir",3]]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",50,[[["hir",3]]]],[11,"union","","Unions this set with another set.",50,[[["literals",3]]]],[11,"cross_product","","Extends this set with another set.",50,[[["literals",3]]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",50,[[]]],[11,"add","","Adds the given literal to this set.",50,[[["literal",3]]]],[11,"add_char_class","","Extends each literal in this set with the character class …",50,[[["classunicode",3]]]],[11,"add_byte_class","","Extends each literal in this set with the byte class …",50,[[["classbytes",3]]]],[11,"cut","","Cuts every member of this set. When a member is cut, it …",50,[[]]],[11,"reverse","","Reverses all members in place.",50,[[]]],[11,"clear","","Clears this set of all members.",50,[[]]],[11,"new","","Returns a new complete literal with the bytes given.",51,[[["vec",3]],["literal",3]]],[11,"empty","","Returns a new complete empty literal.",51,[[],["literal",3]]],[11,"is_cut","","Returns true if this literal was \\\"cut.\\\"",51,[[]]],[11,"cut","","Cuts this literal.",51,[[]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for <code>Hir</code>.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression\'s high-level …",null,null],[11,"new","","Create a new printer.",52,[[],["printer",3]]],[11,"print","","Print the given <code>Ast</code> to the given writer. The writer must …",52,[[["hir",3],["write",8]],["result",6]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[11,"new","","Create a new translator builder with a default c …",53,[[],["translatorbuilder",3]]],[11,"build","","Build a translator using the current configuration.",53,[[],["translator",3]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of …",53,[[],["translatorbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (<code>i</code>) by …",53,[[],["translatorbuilder",3]]],[11,"multi_line","","Enable or disable the multi-line matching flag (<code>m</code>) by …",53,[[],["translatorbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag (<code>s</code>…",53,[[],["translatorbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag (<code>U</code>) by default.",53,[[],["translatorbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",53,[[],["translatorbuilder",3]]],[3,"Translator","","A translator maps abstract syntax to a high level …",null,null],[11,"new","","Create a new translator using the default configuration.",54,[[],["translator",3]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a …",54,[[["ast",4]],[["result",4],["hir",3],["error",3]]]],[5,"visit","regex_syntax::hir","Executes an implementation of <code>Visitor</code> in constant stack …",null,[[["hir",3],["visitor",8]],["result",4]]],[8,"Visitor","","A trait for visiting the high-level IR (HIR) in depth …",null,null],[16,"Output","","The result of visiting an HIR.",55,null],[16,"Err","","An error that visiting an HIR might return.",55,null],[10,"finish","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …",55,[[],["result",4]]],[11,"start","","This method is called before beginning traversal of the …",55,[[]]],[11,"visit_pre","","This method is called on an <code>Hir</code> before descending into …",55,[[["hir",3]],["result",4]]],[11,"visit_post","","This method is called on an <code>Hir</code> after descending all of …",55,[[["hir",3]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",55,[[],["result",4]]],[3,"CaseFoldError","","An error that occurs when Unicode-aware simple case …",null,null],[3,"Error","","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.",null,null],[11,"kind","","Return the type of this error.",56,[[],["errorkind",4]]],[11,"pattern","","The original pattern string in which this error occurred.",56,[[]]],[11,"span","","Return the span at which this error occurred.",56,[[],["span",3]]],[4,"ErrorKind","","The type of an error that occurred while building an <code>Hir</code>.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when …",57,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could …",57,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name …",57,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value …",57,null],[13,"UnicodePerlClassNotFound","","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>…",57,null],[13,"UnicodeCaseUnavailable","","This occurs when the Unicode simple case mapping tables …",57,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a …",57,null],[3,"Hir","","A high-level intermediate representation (HIR) for a …",null,null],[4,"HirKind","","The kind of an arbitrary <code>Hir</code> expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything, …",58,null],[13,"Literal","","A single literal character that matches exactly this …",58,null],[13,"Class","","A single character class that matches any of the …",58,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has …",58,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be …",58,null],[13,"Repetition","","A repetition operation applied to a child expression.",58,null],[13,"Group","","A possibly capturing group, which contains a child …",58,null],[13,"Concat","","A concatenation of expressions. A concatenation always …",58,null],[13,"Alternation","","An alternation of expressions. An alternation always has …",58,null],[11,"kind","","Returns a reference to the underlying HIR kind.",59,[[],["hirkind",4]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its …",59,[[],["hirkind",4]]],[11,"empty","","Returns an empty HIR expression.",59,[[],["hir",3]]],[11,"literal","","Creates a literal HIR expression.",59,[[["literal",4]],["hir",3]]],[11,"class","","Creates a class HIR expression.",59,[[["class",4]],["hir",3]]],[11,"anchor","","Creates an anchor assertion HIR expression.",59,[[["anchor",4]],["hir",3]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",59,[[["wordboundary",4]],["hir",3]]],[11,"repetition","","Creates a repetition HIR expression.",59,[[["repetition",3]],["hir",3]]],[11,"group","","Creates a group HIR expression.",59,[[["group",3]],["hir",3]]],[11,"concat","","Returns the concatenation of the given expressions.",59,[[["vec",3],["hir",3]],["hir",3]]],[11,"alternation","","Returns the alternation of the given expressions.",59,[[["vec",3],["hir",3]],["hir",3]]],[11,"dot","","Build an HIR expression for <code>.</code>.",59,[[],["hir",3]]],[11,"any","","Build an HIR expression for <code>(?s).</code>.",59,[[],["hir",3]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match …",59,[[]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is …",59,[[]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_line_anchored_start","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_line_anchored_end","","Return true if and only if this HIR is required to match …",59,[[]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any …",59,[[]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any …",59,[[]]],[11,"is_match_empty","","Return true if and only if the empty string is part of …",59,[[]]],[11,"is_literal","","Return true if and only if this HIR is a simple literal. …",59,[[]]],[11,"is_alternation_literal","","Return true if and only if this HIR is either a simple …",59,[[]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular …",58,[[]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including …",58,[[]]],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",60,null],[13,"Byte","","A single character represented by an arbitrary byte.",60,null],[11,"is_unicode","","Returns true if and only if this literal corresponds to a …",60,[[]]],[4,"Class","","The high-level intermediate representation of a character …",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",61,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one …",61,null],[11,"case_fold_simple","","Apply Unicode simple case folding to this character …",61,[[]]],[11,"negate","","Negate this character class in place.",61,[[]]],[11,"is_always_utf8","","Returns true if and only if this character class will …",61,[[]]],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[11,"new","","Create a new class from a sequence of ranges.",62,[[],["classunicode",3]]],[11,"empty","","Create a new class with no ranges.",62,[[],["classunicode",3]]],[11,"push","","Add a new range to this set.",62,[[["classunicoderange",3]]]],[11,"iter","","Return an iterator over all ranges in this class.",62,[[],["classunicodeiter",3]]],[11,"ranges","","Return the underlying ranges as a slice.",62,[[]]],[11,"case_fold_simple","","Expand this character class such that it contains all …",62,[[]]],[11,"try_case_fold_simple","","Expand this character class such that it contains all …",62,[[],[["casefolderror",3],["result",4]]]],[11,"negate","","Negate this character class.",62,[[]]],[11,"union","","Union this character class with the given character …",62,[[["classunicode",3]]]],[11,"intersect","","Intersect this character class with the given character …",62,[[["classunicode",3]]]],[11,"difference","","Subtract the given character class from this character …",62,[[["classunicode",3]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character …",62,[[["classunicode",3]]]],[11,"is_all_ascii","","Returns true if and only if this character class will …",62,[[]]],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode …",null,null],[11,"new","","Create a new Unicode scalar value range for a character …",63,[[],["classunicoderange",3]]],[11,"start","","Return the start of this range.",63,[[]]],[11,"end","","Return the end of this range.",63,[[]]],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where …",null,null],[11,"new","","Create a new class from a sequence of ranges.",64,[[],["classbytes",3]]],[11,"empty","","Create a new class with no ranges.",64,[[],["classbytes",3]]],[11,"push","","Add a new range to this set.",64,[[["classbytesrange",3]]]],[11,"iter","","Return an iterator over all ranges in this class.",64,[[],["classbytesiter",3]]],[11,"ranges","","Return the underlying ranges as a slice.",64,[[]]],[11,"case_fold_simple","","Expand this character class such that it contains all …",64,[[]]],[11,"negate","","Negate this byte class.",64,[[]]],[11,"union","","Union this byte class with the given byte class, in place.",64,[[["classbytes",3]]]],[11,"intersect","","Intersect this byte class with the given byte class, in …",64,[[["classbytes",3]]]],[11,"difference","","Subtract the given byte class from this byte class, in …",64,[[["classbytes",3]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte …",64,[[["classbytes",3]]]],[11,"is_all_ascii","","Returns true if and only if this character class will …",64,[[]]],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary …",null,null],[11,"new","","Create a new byte range for a character class.",65,[[],["classbytesrange",3]]],[11,"start","","Return the start of this range.",65,[[]]],[11,"end","","Return the end of this range.",65,[[]]],[4,"Anchor","","The high-level intermediate representation for an anchor …",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text. …",66,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically, …",66,null],[13,"StartText","","Match the beginning of text. Specifically, this matches …",66,null],[13,"EndText","","Match the end of text. Specifically, this matches at the …",66,null],[4,"WordBoundary","","The high-level intermediate representation for a …",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this …",67,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",67,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches …",67,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",67,null],[11,"is_negated","","Returns true if and only if this word boundary assertion …",67,[[]]],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then …",68,null],[12,"hir","","The expression inside the capturing group, which may be …",68,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",69,null],[13,"CaptureName","","A named capturing group.",69,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",70,null],[12,"index","","The capture index of the group.",70,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",69,null],[3,"Repetition","","The high-level intermediate representation of a …",null,null],[12,"kind","","The kind of this repetition operator.",71,null],[12,"greedy","","Whether this repetition operator is greedy or not. A …",71,null],[12,"hir","","The expression being repeated.",71,null],[11,"is_match_empty","","Returns true if and only if this repetition operator …",71,[[]]],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",72,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",72,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",72,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",72,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",73,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",73,null],[13,"Bounded","","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …",73,null],[0,"utf8","regex_syntax","Converts ranges of Unicode scalar values to equivalent …",null,null],[4,"Utf8Sequence","regex_syntax::utf8","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",74,null],[13,"Two","","Two successive byte ranges.",74,null],[13,"Three","","Three successive byte ranges.",74,null],[13,"Four","","Four successive byte ranges.",74,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",74,[[]]],[11,"len","","Returns the number of byte ranges in this sequence.",74,[[]]],[11,"reverse","","Reverses the ranges in this sequence.",74,[[]]],[11,"matches","","Returns true if and only if a prefix of <code>bytes</code> matches …",74,[[]]],[3,"Utf8Range","","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",75,null],[12,"end","","End of byte range (inclusive).",75,null],[11,"matches","","Returns true if and only if the given byte is in this …",75,[[]]],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the …",76,[[]]],[4,"Error","regex_syntax","This error type encompasses any error that can be …",null,null],[13,"Parse","","An error that occurred while translating concrete syntax …",77,null],[13,"Translate","","An error that occurred while translating abstract syntax …",77,null],[6,"Result","","A type alias for dealing with errors returned by this …",null,null],[3,"Parser","","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[3,"UnicodeWordError","","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …",null,null],[5,"escape","","Escapes all regular expression meta characters in <code>text</code>.",null,[[],["string",3]]],[5,"escape_into","","Escapes all meta characters in <code>text</code> and writes the result …",null,[[["string",3]]]],[5,"is_meta_character","","Returns true if the give character has significance in a …",null,[[]]],[5,"is_word_character","","Returns true if and only if the given character is a …",null,[[]]],[5,"try_is_word_character","","Returns true if and only if the given character is a …",null,[[],[["result",4],["unicodeworderror",3]]]],[5,"is_word_byte","","Returns true if and only if the given character is an …",null,[[]]],[11,"from","regex_syntax::ast::parse","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","regex_syntax::ast::print","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","regex_syntax::ast","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","regex_syntax","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"to_string","","",77,[[],["string",3]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","regex_syntax::hir::literal","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","regex_syntax::hir::print","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","regex_syntax::hir::translate","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","regex_syntax::hir","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_string","","",78,[[],["string",3]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"to_string","","",59,[[],["string",3]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"into_iter","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"into_iter","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","regex_syntax","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_string","","",83,[[],["string",3]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","regex_syntax::utf8","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"drop","regex_syntax::ast","",13,[[]]],[11,"drop","","",30,[[]]],[11,"drop","regex_syntax::hir","",59,[[]]],[11,"as_ref","regex_syntax::hir::literal","",51,[[]]],[11,"from","regex_syntax","",77,[[["error",3]],["error",4]]],[11,"from","","",77,[[["error",3]],["error",4]]],[11,"next","regex_syntax::hir","",79,[[],[["classunicoderange",3],["option",4]]]],[11,"next","","",80,[[],[["option",4],["classbytesrange",3]]]],[11,"next","regex_syntax::utf8","",76,[[],["option",4]]],[11,"clone","regex_syntax::ast::parse","",0,[[],["parserbuilder",3]]],[11,"clone","","",1,[[],["parser",3]]],[11,"clone","regex_syntax::ast","",4,[[],["error",3]]],[11,"clone","","",5,[[],["errorkind",4]]],[11,"clone","","",9,[[],["span",3]]],[11,"clone","","",10,[[],["position",3]]],[11,"clone","","",11,[[],["withcomments",3]]],[11,"clone","","",12,[[],["comment",3]]],[11,"clone","","",13,[[],["ast",4]]],[11,"clone","","",14,[[],["alternation",3]]],[11,"clone","","",15,[[],["concat",3]]],[11,"clone","","",16,[[],["literal",3]]],[11,"clone","","",17,[[],["literalkind",4]]],[11,"clone","","",18,[[],["specialliteralkind",4]]],[11,"clone","","",19,[[],["hexliteralkind",4]]],[11,"clone","","",20,[[],["class",4]]],[11,"clone","","",21,[[],["classperl",3]]],[11,"clone","","",22,[[],["classperlkind",4]]],[11,"clone","","",23,[[],["classascii",3]]],[11,"clone","","",24,[[],["classasciikind",4]]],[11,"clone","","",25,[[],["classunicode",3]]],[11,"clone","","",26,[[],["classunicodekind",4]]],[11,"clone","","",28,[[],["classunicodeopkind",4]]],[11,"clone","","",29,[[],["classbracketed",3]]],[11,"clone","","",30,[[],["classset",4]]],[11,"clone","","",31,[[],["classsetitem",4]]],[11,"clone","","",32,[[],["classsetrange",3]]],[11,"clone","","",33,[[],["classsetunion",3]]],[11,"clone","","",34,[[],["classsetbinaryop",3]]],[11,"clone","","",35,[[],["classsetbinaryopkind",4]]],[11,"clone","","",36,[[],["assertion",3]]],[11,"clone","","",37,[[],["assertionkind",4]]],[11,"clone","","",38,[[],["repetition",3]]],[11,"clone","","",39,[[],["repetitionop",3]]],[11,"clone","","",40,[[],["repetitionkind",4]]],[11,"clone","","",41,[[],["repetitionrange",4]]],[11,"clone","","",42,[[],["group",3]]],[11,"clone","","",43,[[],["groupkind",4]]],[11,"clone","","",44,[[],["capturename",3]]],[11,"clone","","",45,[[],["setflags",3]]],[11,"clone","","",46,[[],["flags",3]]],[11,"clone","","",47,[[],["flagsitem",3]]],[11,"clone","","",48,[[],["flagsitemkind",4]]],[11,"clone","","",49,[[],["flag",4]]],[11,"clone","regex_syntax","",77,[[],["error",4]]],[11,"clone","regex_syntax::hir::literal","",50,[[],["literals",3]]],[11,"clone","","",51,[[],["literal",3]]],[11,"clone","regex_syntax::hir::translate","",53,[[],["translatorbuilder",3]]],[11,"clone","","",54,[[],["translator",3]]],[11,"clone","regex_syntax::hir","",56,[[],["error",3]]],[11,"clone","","",57,[[],["errorkind",4]]],[11,"clone","","",59,[[],["hir",3]]],[11,"clone","","",58,[[],["hirkind",4]]],[11,"clone","","",60,[[],["literal",4]]],[11,"clone","","",61,[[],["class",4]]],[11,"clone","","",62,[[],["classunicode",3]]],[11,"clone","","",63,[[],["classunicoderange",3]]],[11,"clone","","",64,[[],["classbytes",3]]],[11,"clone","","",65,[[],["classbytesrange",3]]],[11,"clone","","",66,[[],["anchor",4]]],[11,"clone","","",67,[[],["wordboundary",4]]],[11,"clone","","",68,[[],["group",3]]],[11,"clone","","",69,[[],["groupkind",4]]],[11,"clone","","",71,[[],["repetition",3]]],[11,"clone","","",72,[[],["repetitionkind",4]]],[11,"clone","","",73,[[],["repetitionrange",4]]],[11,"clone","regex_syntax","",81,[[],["parserbuilder",3]]],[11,"clone","","",82,[[],["parser",3]]],[11,"clone","regex_syntax::utf8","",74,[[],["utf8sequence",4]]],[11,"clone","","",75,[[],["utf8range",3]]],[11,"default","regex_syntax::ast::parse","",0,[[],["parserbuilder",3]]],[11,"default","regex_syntax::hir::translate","",53,[[],["translatorbuilder",3]]],[11,"default","regex_syntax::hir","",63,[[],["classunicoderange",3]]],[11,"default","","",65,[[],["classbytesrange",3]]],[11,"default","regex_syntax","",81,[[],["parserbuilder",3]]],[11,"cmp","regex_syntax::ast","",9,[[["span",3]],["ordering",4]]],[11,"cmp","","",10,[[["position",3]],["ordering",4]]],[11,"cmp","regex_syntax::hir::literal","",51,[[["literal",3]],["ordering",4]]],[11,"cmp","regex_syntax::hir","",63,[[["classunicoderange",3]],["ordering",4]]],[11,"cmp","","",65,[[["classbytesrange",3]],["ordering",4]]],[11,"cmp","regex_syntax::utf8","",74,[[["utf8sequence",4]],["ordering",4]]],[11,"cmp","","",75,[[["utf8range",3]],["ordering",4]]],[11,"eq","regex_syntax::ast","",4,[[["error",3]]]],[11,"ne","","",4,[[["error",3]]]],[11,"eq","","",5,[[["errorkind",4]]]],[11,"ne","","",5,[[["errorkind",4]]]],[11,"eq","","",9,[[["span",3]]]],[11,"ne","","",9,[[["span",3]]]],[11,"eq","","",10,[[["position",3]]]],[11,"ne","","",10,[[["position",3]]]],[11,"eq","","",11,[[["withcomments",3]]]],[11,"ne","","",11,[[["withcomments",3]]]],[11,"eq","","",12,[[["comment",3]]]],[11,"ne","","",12,[[["comment",3]]]],[11,"eq","","",13,[[["ast",4]]]],[11,"ne","","",13,[[["ast",4]]]],[11,"eq","","",14,[[["alternation",3]]]],[11,"ne","","",14,[[["alternation",3]]]],[11,"eq","","",15,[[["concat",3]]]],[11,"ne","","",15,[[["concat",3]]]],[11,"eq","","",16,[[["literal",3]]]],[11,"ne","","",16,[[["literal",3]]]],[11,"eq","","",17,[[["literalkind",4]]]],[11,"ne","","",17,[[["literalkind",4]]]],[11,"eq","","",18,[[["specialliteralkind",4]]]],[11,"eq","","",19,[[["hexliteralkind",4]]]],[11,"eq","","",20,[[["class",4]]]],[11,"ne","","",20,[[["class",4]]]],[11,"eq","","",21,[[["classperl",3]]]],[11,"ne","","",21,[[["classperl",3]]]],[11,"eq","","",22,[[["classperlkind",4]]]],[11,"eq","","",23,[[["classascii",3]]]],[11,"ne","","",23,[[["classascii",3]]]],[11,"eq","","",24,[[["classasciikind",4]]]],[11,"eq","","",25,[[["classunicode",3]]]],[11,"ne","","",25,[[["classunicode",3]]]],[11,"eq","","",26,[[["classunicodekind",4]]]],[11,"ne","","",26,[[["classunicodekind",4]]]],[11,"eq","","",28,[[["classunicodeopkind",4]]]],[11,"eq","","",29,[[["classbracketed",3]]]],[11,"ne","","",29,[[["classbracketed",3]]]],[11,"eq","","",30,[[["classset",4]]]],[11,"ne","","",30,[[["classset",4]]]],[11,"eq","","",31,[[["classsetitem",4]]]],[11,"ne","","",31,[[["classsetitem",4]]]],[11,"eq","","",32,[[["classsetrange",3]]]],[11,"ne","","",32,[[["classsetrange",3]]]],[11,"eq","","",33,[[["classsetunion",3]]]],[11,"ne","","",33,[[["classsetunion",3]]]],[11,"eq","","",34,[[["classsetbinaryop",3]]]],[11,"ne","","",34,[[["classsetbinaryop",3]]]],[11,"eq","","",35,[[["classsetbinaryopkind",4]]]],[11,"eq","","",36,[[["assertion",3]]]],[11,"ne","","",36,[[["assertion",3]]]],[11,"eq","","",37,[[["assertionkind",4]]]],[11,"eq","","",38,[[["repetition",3]]]],[11,"ne","","",38,[[["repetition",3]]]],[11,"eq","","",39,[[["repetitionop",3]]]],[11,"ne","","",39,[[["repetitionop",3]]]],[11,"eq","","",40,[[["repetitionkind",4]]]],[11,"ne","","",40,[[["repetitionkind",4]]]],[11,"eq","","",41,[[["repetitionrange",4]]]],[11,"ne","","",41,[[["repetitionrange",4]]]],[11,"eq","","",42,[[["group",3]]]],[11,"ne","","",42,[[["group",3]]]],[11,"eq","","",43,[[["groupkind",4]]]],[11,"ne","","",43,[[["groupkind",4]]]],[11,"eq","","",44,[[["capturename",3]]]],[11,"ne","","",44,[[["capturename",3]]]],[11,"eq","","",45,[[["setflags",3]]]],[11,"ne","","",45,[[["setflags",3]]]],[11,"eq","","",46,[[["flags",3]]]],[11,"ne","","",46,[[["flags",3]]]],[11,"eq","","",47,[[["flagsitem",3]]]],[11,"ne","","",47,[[["flagsitem",3]]]],[11,"eq","","",48,[[["flagsitemkind",4]]]],[11,"ne","","",48,[[["flagsitemkind",4]]]],[11,"eq","","",49,[[["flag",4]]]],[11,"eq","regex_syntax","",77,[[["error",4]]]],[11,"ne","","",77,[[["error",4]]]],[11,"eq","regex_syntax::hir::literal","",50,[[["literals",3]]]],[11,"ne","","",50,[[["literals",3]]]],[11,"eq","","",51,[[["literal",3]]]],[11,"eq","regex_syntax::hir","",56,[[["error",3]]]],[11,"ne","","",56,[[["error",3]]]],[11,"eq","","",57,[[["errorkind",4]]]],[11,"eq","","",59,[[["hir",3]]]],[11,"ne","","",59,[[["hir",3]]]],[11,"eq","","",58,[[["hirkind",4]]]],[11,"ne","","",58,[[["hirkind",4]]]],[11,"eq","","",60,[[["literal",4]]]],[11,"ne","","",60,[[["literal",4]]]],[11,"eq","","",61,[[["class",4]]]],[11,"ne","","",61,[[["class",4]]]],[11,"eq","","",62,[[["classunicode",3]]]],[11,"ne","","",62,[[["classunicode",3]]]],[11,"eq","","",63,[[["classunicoderange",3]]]],[11,"ne","","",63,[[["classunicoderange",3]]]],[11,"eq","","",64,[[["classbytes",3]]]],[11,"ne","","",64,[[["classbytes",3]]]],[11,"eq","","",65,[[["classbytesrange",3]]]],[11,"ne","","",65,[[["classbytesrange",3]]]],[11,"eq","","",66,[[["anchor",4]]]],[11,"eq","","",67,[[["wordboundary",4]]]],[11,"eq","","",68,[[["group",3]]]],[11,"ne","","",68,[[["group",3]]]],[11,"eq","","",69,[[["groupkind",4]]]],[11,"ne","","",69,[[["groupkind",4]]]],[11,"eq","","",71,[[["repetition",3]]]],[11,"ne","","",71,[[["repetition",3]]]],[11,"eq","","",72,[[["repetitionkind",4]]]],[11,"ne","","",72,[[["repetitionkind",4]]]],[11,"eq","","",73,[[["repetitionrange",4]]]],[11,"ne","","",73,[[["repetitionrange",4]]]],[11,"eq","regex_syntax::utf8","",74,[[["utf8sequence",4]]]],[11,"ne","","",74,[[["utf8sequence",4]]]],[11,"eq","","",75,[[["utf8range",3]]]],[11,"ne","","",75,[[["utf8range",3]]]],[11,"partial_cmp","regex_syntax::ast","",9,[[["span",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",10,[[["position",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","regex_syntax::hir::literal","",51,[[["literal",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","regex_syntax::hir","",63,[[["classunicoderange",3]],[["ordering",4],["option",4]]]],[11,"lt","","",63,[[["classunicoderange",3]]]],[11,"le","","",63,[[["classunicoderange",3]]]],[11,"gt","","",63,[[["classunicoderange",3]]]],[11,"ge","","",63,[[["classunicoderange",3]]]],[11,"partial_cmp","","",65,[[["classbytesrange",3]],[["ordering",4],["option",4]]]],[11,"lt","","",65,[[["classbytesrange",3]]]],[11,"le","","",65,[[["classbytesrange",3]]]],[11,"gt","","",65,[[["classbytesrange",3]]]],[11,"ge","","",65,[[["classbytesrange",3]]]],[11,"partial_cmp","regex_syntax::utf8","",74,[[["utf8sequence",4]],[["ordering",4],["option",4]]]],[11,"lt","","",74,[[["utf8sequence",4]]]],[11,"le","","",74,[[["utf8sequence",4]]]],[11,"gt","","",74,[[["utf8sequence",4]]]],[11,"ge","","",74,[[["utf8sequence",4]]]],[11,"partial_cmp","","",75,[[["utf8range",3]],[["ordering",4],["option",4]]]],[11,"lt","","",75,[[["utf8range",3]]]],[11,"le","","",75,[[["utf8range",3]]]],[11,"gt","","",75,[[["utf8range",3]]]],[11,"ge","","",75,[[["utf8range",3]]]],[11,"deref","regex_syntax::hir::literal","",51,[[],["vec",3]]],[11,"deref_mut","","",51,[[],["vec",3]]],[11,"fmt","regex_syntax::ast::parse","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast::print","",2,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",77,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::literal","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::print","",52,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir::translate","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",78,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",83,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::utf8","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::ast","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",77,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax::hir","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","regex_syntax","",83,[[["formatter",3]],["result",6]]],[11,"description","regex_syntax::ast","",4,[[]]],[11,"description","regex_syntax","",77,[[]]],[11,"description","regex_syntax::hir","",56,[[]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the …",3,[[]]],[11,"visit_pre","","This method is called on an <code>Ast</code> before descending into …",3,[[["ast",4]],["result",4]]],[11,"visit_post","","This method is called on an <code>Ast</code> after descending all of …",3,[[["ast",4]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",3,[[],["result",4]]],[11,"visit_class_set_item_pre","","This method is called on every <code>ClassSetItem</code> before …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_item_post","","This method is called on every <code>ClassSetItem</code> after …",3,[[["classsetitem",4]],["result",4]]],[11,"visit_class_set_binary_op_pre","","This method is called on every <code>ClassSetBinaryOp</code> before …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_post","","This method is called on every <code>ClassSetBinaryOp</code> after …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right …",3,[[["classsetbinaryop",3]],["result",4]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the …",55,[[]]],[11,"visit_pre","","This method is called on an <code>Hir</code> before descending into …",55,[[["hir",3]],["result",4]]],[11,"visit_post","","This method is called on an <code>Hir</code> after descending all of …",55,[[["hir",3]],["result",4]]],[11,"visit_alternation_in","","This method is called between child nodes of an …",55,[[],["result",4]]],[11,"new","regex_syntax","Create a new parser builder with a default configuration.",81,[[],["parserbuilder",3]]],[11,"build","","Build a parser from this configuration with the given …",81,[[],["parser",3]]],[11,"nest_limit","","Set the nesting limit for this parser.",81,[[],["parserbuilder",3]]],[11,"octal","","Whether to support octal syntax or not.",81,[[],["parserbuilder",3]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of …",81,[[],["parserbuilder",3]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",81,[[],["parserbuilder",3]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",81,[[],["parserbuilder",3]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",81,[[],["parserbuilder",3]]],[11,"dot_matches_new_line","","Enable or disable the \\\"dot matches any character\\\" flag by …",81,[[],["parserbuilder",3]]],[11,"swap_greed","","Enable or disable the \\\"swap greed\\\" flag by default.",81,[[],["parserbuilder",3]]],[11,"unicode","","Enable or disable the Unicode flag (<code>u</code>) by default.",81,[[],["parserbuilder",3]]],[11,"new","","Create a new parser with a default configuration.",82,[[],["parser",3]]],[11,"parse","","Parse the regular expression into a high level …",82,[[],[["hir",3],["result",6]]]]],"p":[[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[4,"Ast"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[3,"ClassPerl"],[4,"ClassPerlKind"],[3,"ClassAscii"],[4,"ClassAsciiKind"],[3,"ClassUnicode"],[4,"ClassUnicodeKind"],[13,"NamedValue"],[4,"ClassUnicodeOpKind"],[3,"ClassBracketed"],[4,"ClassSet"],[4,"ClassSetItem"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[4,"ClassSetBinaryOpKind"],[3,"Assertion"],[4,"AssertionKind"],[3,"Repetition"],[3,"RepetitionOp"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Group"],[4,"GroupKind"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"FlagsItemKind"],[4,"Flag"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[4,"HirKind"],[3,"Hir"],[4,"Literal"],[4,"Class"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[4,"Anchor"],[4,"WordBoundary"],[3,"Group"],[4,"GroupKind"],[13,"CaptureName"],[3,"Repetition"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"],[4,"Error"],[3,"CaseFoldError"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"]]},\
"thread_local":{"doc":"Per-object thread-local storage","i":[[3,"CachedIntoIter","thread_local","An iterator that moves out of a <code>CachedThreadLocal</code>.",null,null],[3,"CachedIterMut","","Mutable iterator over the contents of a <code>CachedThreadLocal</code>.",null,null],[3,"CachedThreadLocal","","Wrapper around <code>ThreadLocal</code> which adds a fast path for a …",null,null],[3,"ThreadLocal","","Thread-local variable wrapper",null,null],[11,"new","","Creates a new empty <code>ThreadLocal</code>.",0,[[],["threadlocal",3]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[],["option",4]]],[11,"get_or","","Returns the element for the current thread, or creates it …",0,[[]]],[11,"get_or_try","","Returns the element for the current thread, or creates it …",0,[[],["result",4]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all …",0,[[],["itermut",3]]],[11,"clear","","Removes all thread-specific values from the <code>ThreadLocal</code>, …",0,[[]]],[11,"get_or_default","","Returns the element for the current thread, or creates a …",0,[[]]],[3,"IterMut","","Mutable iterator over the contents of a <code>ThreadLocal</code>.",null,null],[3,"IntoIter","","An iterator that moves out of a <code>ThreadLocal</code>.",null,null],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"drop","","",0,[[]]],[11,"into_iter","","",1,[[],["cachedintoiter",3]]],[11,"into_iter","","",0,[[],["intoiter",3]]],[11,"next","","",2,[[],["option",4]]],[11,"size_hint","","",2,[[]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"default","","",1,[[],["cachedthreadlocal",3]]],[11,"default","","",0,[[],["threadlocal",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"new","","Creates a new empty <code>CachedThreadLocal</code>.",1,[[],["cachedthreadlocal",3]]],[11,"get","","Returns the element for the current thread, if it exists.",1,[[],["option",4]]],[11,"get_or","","Returns the element for the current thread, or creates it …",1,[[]]],[11,"get_or_try","","Returns the element for the current thread, or creates it …",1,[[],["result",4]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all …",1,[[],["cacheditermut",3]]],[11,"clear","","Removes all thread-specific values from the <code>ThreadLocal</code>, …",1,[[]]],[11,"get_or_default","","Returns the element for the current thread, or creates a …",1,[[]]]],"p":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"CachedIterMut"],[3,"CachedIntoIter"],[3,"IterMut"],[3,"IntoIter"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);